<script>
let currentDate = new Date();
let selectedDate = null;
let selectedTime = null;
let cart = [];
let cartTotal = 0;
let hasCompletedInformation = false;

function selectAppointmentDetails(button) {
    // Hide appointment details and show datetime selection
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) {
        apptDet.style.display = 'none';
        apptDet.classList.add('display-none');
    }
    
    const dateTimeSection = document.getElementById('datetime-selection');
    if (dateTimeSection) {
        dateTimeSection.style.display = 'block';
        dateTimeSection.classList.remove('display-none');
    }
    
    // Get appointment data from button attributes
    const appointmentName = button.getAttribute('data-appointment');
    const fee = button.getAttribute('data-fee');
    const duration = button.getAttribute('data-duration');
    
    // Update appointment info in the datetime selection view
    const companyName = document.getElementById('companyName');
    if (companyName) companyName.textContent = 'SM Megamall - ' + (currentSelectedService || 'Face');
    
    const selectedApptName = document.getElementById('selected-appointment-name');
    if (selectedApptName) selectedApptName.textContent = appointmentName;
    
    const selectedApptDetails = document.getElementById('selected-appointment-details');
    if (selectedApptDetails) selectedApptDetails.textContent = duration;
    
    const selectedApptFee = document.getElementById('selected-appointment-fee');
    if (selectedApptFee) selectedApptFee.textContent = fee ? `Reservation Fee: ${fee}` : '';
    
    // Initialize calendar and time slots
    generateCalendar();
    generateTimeSlots();

    // Reset time selection
    selectedTime = null;
    
    // Set default selected date to today + 1 (only on desktop)
    // On mobile/tablet, user must select date first before time slots appear
    if (window.innerWidth >= 1200) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        selectDate(tomorrow);
    }
    
    // Scroll to top of page
    window.scrollTo(0, 0);
}

function showDateTimeSelection(button) {
    document.getElementById('appointment-selection').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
    
    // Get appointment data from button attributes
    const appointmentName = button.getAttribute('data-appointment');
    const fee = button.getAttribute('data-fee');
    const duration = button.getAttribute('data-duration');
    
    // Update appointment info
    document.getElementById('companyName').textContent = 'Company Name';
    document.getElementById('selected-appointment-name').textContent = appointmentName;
    document.getElementById('selected-appointment-details').textContent = appointmentName;
    document.getElementById('selected-appointment-fee').textContent = duration;
    document.getElementById('selected-appointment-duration').textContent = fee;
    
    // Initialize calendar and time slots
    generateCalendar();
    generateTimeSlots();

    // Reset time selection dropdown
    selectedTime = null;
    document.getElementById('time-selection-dropdown').style.display = 'none';
    document.getElementById('selected-time-display').textContent = '';
    
    // Set default selected date to today + 1 (only on desktop)
    // On mobile/tablet, user must select date first before time slots appear
    if (window.innerWidth >= 1200) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        selectDate(tomorrow);
    }
}

function showAppointmentSelection() {
    document.getElementById('datetime-selection').style.display = 'none';
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'block';
}

function showDateTimeSelection() {
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
}

function goBack() {
    // Navigate back to the previous page or dashboard
    window.history.back();
}

// Generate time slots with fixed times as shown in the image
function generateTimeSlots() {
    const timeSlotsContainer = document.getElementById('time-slots');
    timeSlotsContainer.innerHTML = '';
    
    // Fixed time slots as shown in the image
    const timeSlots = [
        '9:00 am',
        '9:50 am',
        '10:40 am',
        '11:30 am',
        '12:20 pm',
        '1:10 pm',
        '2:00 pm',
        '2:50 pm',
        '3:40 pm',
        '4:30 pm',
        '5:20 pm',
        '6:10 pm',
        '7:00 pm',
        '7:50 pm',
        '8:40 pm',
        '9:30 pm',
    ];
    
    // Create time slot elements for each time
    timeSlots.forEach(timeString => {
        const timeSlot = document.createElement('div');
        timeSlot.className = 'time-slot';
        timeSlot.innerHTML = `
            <div class="time-slot-content">
                <div class="time-text">${timeString}</div>
                <div class="select-button select-button-hidden">Select</div>
            </div>
        `;
        timeSlot.onclick = () => selectTimeSlot(timeSlot, timeString);
        
        timeSlotsContainer.appendChild(timeSlot);
    });
}

// Scroll time slots up (show earlier times)
function scrollTimeUp() {
    const timeSlotsContainer = document.getElementById('time-slots');
    timeSlotsContainer.scrollTop -= 100;
}

// Scroll time slots down (show later times)
function scrollTimeDown() {
    const timeSlotsContainer = document.getElementById('time-slots');
    timeSlotsContainer.scrollTop += 100;
}

function generateCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // Update month/year display
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    
    const monthYearElement = document.getElementById('calendar-month-year');
    if (monthYearElement) {
        monthYearElement.textContent = `${monthNames[month]} ${year}`;
    }
    
    // Clear previous days
    const daysContainer = document.getElementById('calendar-days');
    if (!daysContainer) return; // Exit if element doesn't exist
    
    daysContainer.innerHTML = '';
    
    // Get first day of month and number of days
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Add previous month's trailing days
    for (let i = firstDay - 1; i >= 0; i--) {
        const dayElement = createDayElement(daysInPrevMonth - i, true);
        daysContainer.appendChild(dayElement);
    }
    
    // Add current month's days
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = createDayElement(day, false);
        daysContainer.appendChild(dayElement);
    }
    
    // Add next month's leading days
    const totalCells = daysContainer.children.length;
    const remainingCells = 42 - totalCells; // 6 rows Ã— 7 days
    for (let day = 1; day <= remainingCells; day++) {
        const dayElement = createDayElement(day, true);
        daysContainer.appendChild(dayElement);
    }
}

function createDayElement(day, isOtherMonth) {
    const dayElement = document.createElement('div');
    dayElement.className = 'calendar-day';
    
    if (isOtherMonth) {
        dayElement.classList.add('other-month');
        dayElement.textContent = day;
    } else {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
        const today = new Date();
        const dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday
        
        // Add light circle highlight for all days (Sun-Sat: 0-6)
        if (dayOfWeek >= 0 && dayOfWeek <= 6) {
            dayElement.classList.add('weekday-highlight');
        }
        
        // Check if this is the selected date
        if (selectedDate && date.getDate() === selectedDate.getDate() && 
            date.getMonth() === selectedDate.getMonth() && 
            date.getFullYear() === selectedDate.getFullYear()) {
            dayElement.classList.add('selected');
        }
        
        // Create day number element
        dayElement.textContent = day;
        
        // Comment out the Today indicator
        /*
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
            // Add 'Today' label below the day number
            const todayLabel = document.createElement('span');
            todayLabel.className = 'today-label';
            todayLabel.textContent = 'Today';
            dayElement.appendChild(todayLabel);
        }
        */
        
        dayElement.onclick = () => selectDate(date);
    }
    
    return dayElement;
}

function selectDate(date) {
    selectedDate = date;
    
    // Update all calendar days to remove selected class
    const allDays = document.querySelectorAll('.calendar-day');
    allDays.forEach(day => day.classList.remove('selected'));
    
    // Find and select the correct day
    allDays.forEach(day => {
        if (!day.classList.contains('other-month')) {
            const dayNum = parseInt(day.textContent);
            const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), dayNum);
            
            if (dayDate.getDate() === date.getDate() && 
                dayDate.getMonth() === date.getMonth() && 
                dayDate.getFullYear() === date.getFullYear()) {
                day.classList.add('selected');
            }
        }
    });
    
    // Update selected date display
    const days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
    const dayName = days[date.getDay()];
    const monthName = months[date.getMonth()];
    const dayNumber = date.getDate();
    
    // Keep bold formatting when a date is selected
    const dateDisplay = document.getElementById('selected-date-display');
    dateDisplay.innerHTML = `<strong>${dayName}, ${monthName} ${dayNumber}</strong>`; // Keep strong tags
    
    // Keep bold on weekday headers
    const weekdayHeaders = document.querySelectorAll('.weekday');
    weekdayHeaders.forEach(header => {
        if (!header.querySelector('strong')) {
            header.innerHTML = `<strong>${header.textContent}</strong>`; // Ensure strong tags remain
        }
    });
    
    // Update weekday header colors based on selected weekday
    const headerNodes = document.querySelectorAll('.calendar-weekdays .weekday');
    headerNodes.forEach((header, idx) => {
        header.classList.remove('weekday-dim', 'weekday-active');
        if (idx === date.getDay()) {
            header.classList.add('weekday-active');
        } else {
            header.classList.add('weekday-dim');
        }
    });
    
    // Mobile and tablet-specific behavior: Show time slots after date selection
    // Includes mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        showTimeSlotsOnMobile();
    }
}

function selectTimeSlot(element, time) {
    // Only allow selection if a date has been selected first
    if (!selectedDate) {
        alert('Please select a date first.');
        return;
    }
    
    selectedTime = time;
    
    // Remove previous selection
    document.querySelectorAll('.time-slot').forEach(slot => {
        slot.classList.remove('time-selected');
        const submitBtn = slot.querySelector('.select-button');
        if (submitBtn) {
            submitBtn.classList.add('select-button-hidden');
            submitBtn.classList.remove('d-flex');
        }
    });
    
    // Add selection to clicked element
    element.classList.add('time-selected');
    const submitButton = element.querySelector('.select-button');
    if (submitButton) {
        submitButton.classList.remove('select-button-hidden');
        submitButton.classList.add('d-flex');
        
        // Add click handler to submit button
        submitButton.onclick = function(e) {
            e.stopPropagation(); // Prevent triggering the time slot click
            submitAppointment();
        };
    }
}

function submitAppointment() {
    if (!selectedDate || !selectedTime) {
        alert('Please select both date and time.');
        return;
    }
    
    // Update information view with selected appointment info
    const appointmentName = document.getElementById('selected-appointment-name').textContent;
    const appointmentDetails = document.getElementById('selected-appointment-details').textContent;
    const appointmentFee = document.getElementById('selected-appointment-fee').textContent;
    
    document.getElementById('info-appointment-name').textContent = appointmentName;
    document.getElementById('info-appointment-details').textContent = appointmentDetails;
    document.getElementById('info-appointment-fee').textContent = appointmentFee;
    
    // Hide date/time selection and show information view
    document.getElementById('datetime-selection').style.display = 'none';
    document.getElementById('information-view').style.display = 'block';
}

function confirmTime() {
    if (!selectedDate || !selectedTime) {
        alert('Please select both date and time.');
        return;
    }
    
    // Since we no longer use the information modal, directly proceed to the next step
    // For now, we'll just show an alert with the appointment details
    const appointmentName = document.getElementById('selected-appointment-name').textContent;
    const appointmentDuration = document.getElementById('selected-appointment-fee').textContent;
    const appointmentFee = document.getElementById('selected-appointment-duration').textContent;
    
    alert(`Appointment confirmed: ${appointmentName}, ${appointmentDuration}, ${appointmentFee}`);
    
    // You can add code here to proceed to the next step in your workflow
    // For example, redirect to another page or update the UI
}

function validateAge(input) {
    // Remove any non-numeric characters
    let value = input.value.replace(/[^0-9]/g, '');
    
    // Limit to 2 digits maximum
    if (value.length > 2) {
        value = value.slice(0, 2);
    }
    
    // Convert to number and validate range (1-99)
    let numValue = parseInt(value);
    if (numValue > 99) {
        value = '99';
    } else if (numValue < 1 && value.length > 0) {
        value = '1';
    }
    
    // Update the input value
    input.value = value;
}

function submitInformation() {
    // Validate age field before submission
    const ageInput = document.getElementById('age');
    const ageValue = ageInput.value;
    
    if (!ageValue || ageValue < 1 || ageValue > 99) {
        alert('Please enter a valid age between 1 and 99.');
        ageInput.focus();
        return;
    }
    
    // Mark that user has completed information flow
    hasCompletedInformation = true;
    
    // Add the current service to cart
    const appointmentName = document.getElementById('info-appointment-name').textContent;
    const appointmentDetails = document.getElementById('info-appointment-details').textContent;
    const appointmentFee = document.getElementById('info-appointment-fee').textContent;
    
    // Extract price from fee text (e.g., "Reservation Fee: â‚±90.00" -> 90.00)
    let price = 380.00; // Default price
    const feeMatch = appointmentFee.match(/â‚±([\d,]+\.?\d*)/);
    if (feeMatch) {
        price = parseFloat(feeMatch[1].replace(/,/g, ''));
    }
    
    // Format date and time for display
    const dateDisplay = selectedDate ? selectedDate.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
    }) : 'Date not selected';
    
    const timeDisplay = selectedTime || 'Time not selected';
    
    // Add to cart
    cart.push({
        service: appointmentName,
        appointment: appointmentName,
        details: appointmentDetails,
        date: dateDisplay,
        time: timeDisplay,
        price: price,
        quantity: 1,
        total: price
    });
    
    // Update cart display
    updateCartDisplay();
    
    // Navigate back to service category selection to add more services
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('service-category-selection').style.display = 'block';
    
    // Show cart section since user has completed information
    const cartSection = document.getElementById('cart-section');
    if (cartSection) {
        cartSection.classList.remove('display-none');
        cartSection.style.display = 'block';
    }
}

function previousMonth() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    generateCalendar();
}

function nextMonth() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    generateCalendar();
}

// Navigation functions
function showAppointmentSelection() {
    document.getElementById('datetime-selection').style.display = 'none';
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'block';
}

function showDateTimeView() {
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
}

// Mobile and tablet calendar-first flow functions
function showTimeSlotsOnMobile() {
    // Support mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        const calendarSection = document.getElementById('calendar-section');
        const timeslotsSection = document.getElementById('timeslots-section');
        
        calendarSection.classList.add('mobile-hide-calendar');
        timeslotsSection.classList.add('mobile-show-timeslots');
    }
}

function showCalendarOnMobile() {
    // Support mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        const calendarSection = document.getElementById('calendar-section');
        const timeslotsSection = document.getElementById('timeslots-section');
        
        calendarSection.classList.remove('mobile-hide-calendar');
        timeslotsSection.classList.remove('mobile-show-timeslots');
    }
}

// New 4-page flow navigation functions
function showServiceCategory(button) {
    const branch = button ? button.getAttribute('data-branch') : null;
    
    // Hide branch selection and show service category selection
    const serviceCategory = document.getElementById('service-category');
    if (serviceCategory) {
        serviceCategory.style.display = 'none';
        serviceCategory.classList.add('display-none');
    }
    
    const serviceCategorySelection = document.getElementById('service-category-selection');
    if (serviceCategorySelection) {
        serviceCategorySelection.style.display = 'block';
        serviceCategorySelection.classList.remove('display-none');
    }
    
    // Update selected branch display if element exists
    const selectedBranchName = document.getElementById('selected-branch-name');
    if (selectedBranchName && branch) {
        selectedBranchName.textContent = branch;
    }
    
    // Scroll to top of page
    window.scrollTo(0, 0);
}

function showBranchSelection() {
    // Check if cart has items before resetting
    if (cart.length > 0) {
        // Show confirmation modal
        const releaseModal = new bootstrap.Modal(document.getElementById('releaseSlotModal'));
        releaseModal.show();
        
        // Set up the continue button action for desktop
        document.getElementById('confirmReleaseBtn').onclick = function() {
            // Reset cart state when confirmed
            hasCompletedInformation = false;
            cart = [];
            updateCartDisplay();
            
            // Hide service category selection and show branch selection
            document.getElementById('service-category-selection').style.display = 'none';
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            document.getElementById('service-category').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
        
        // Set up the continue button action for mobile
        document.getElementById('confirmReleaseBtnMobile').onclick = function() {
            // Reset cart state when confirmed
            hasCompletedInformation = false;
            cart = [];
            updateCartDisplay();
            
            // Hide service category selection and show branch selection
            document.getElementById('service-category-selection').style.display = 'none';
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            document.getElementById('service-category').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
    } else {
        // No items in cart, proceed without confirmation
        hasCompletedInformation = false;
        
        // Hide service category selection and show branch selection
        document.getElementById('service-category-selection').style.display = 'none';
        document.getElementById('appointment-list').style.display = 'none';
        document.getElementById('appointment-selection').style.display = 'none';
        document.getElementById('service-category').style.display = 'block';
    }
}

function showAppointmentDetails(button) {
    const service = button ? button.getAttribute('data-service') : null;
    
    // Store the selected service for cart functionality
    if (service) {
        currentSelectedService = service;
    }
    
    // Hide all other sections explicitly
    const sectionsToHide = [
        'service-category',
        'appointment-list',
        'appointment-selection',
        'date-time-selection',
        'datetime-selection',
        'information-view',
        'service-category-selection',
        'payment-method-view'
    ];
    sectionsToHide.forEach(id => {
        const el = document.getElementById(id);
        if (el) {
            el.style.display = 'none';
            el.classList.add('display-none');
        }
    });

    // Show appointment details
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) {
        apptDet.style.display = 'block';
        apptDet.classList.remove('display-none');
    }
    
    // Optionally store or display selected service
    const selCat = document.getElementById('selected-category-name');
    if (selCat && service) selCat.textContent = service;
    
    // Scroll to top of page
    window.scrollTo(0, 0);
}

function selectAppointment(button) {
    const appointmentName = button.getAttribute('data-appointment');
    const fee = button.getAttribute('data-fee');
    const duration = button.getAttribute('data-duration');
    
    // Hide appointment list and show appointment selection
    document.getElementById('appointment-list').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'block';
    
    // Update selected appointment display in the info section
    document.getElementById('selected-appointment-name').textContent = appointmentName;
    document.getElementById('selected-appointment-details').textContent = `${duration}${fee ? ' - ' + fee : ''}`;
    
    // Update the final appointment card
    document.getElementById('final-appointment-name').textContent = appointmentName;
    document.getElementById('final-appointment-fee').textContent = fee || '';
    document.getElementById('final-appointment-duration').textContent = duration;
}

function showAppointmentList(arg) {
    // Compatibility: if called with a button (old markup), treat as Details navigation.
    if (arg) {
        return showAppointmentDetails(arg);
    }
    // Updated: In the new flow, going "back" from appointment selection should
    // return to the Appointment Details view, not the deprecated appointment list.
    const apptSel = document.getElementById('appointment-selection');
    if (apptSel) apptSel.style.display = 'none';
    const apptList = document.getElementById('appointment-list');
    if (apptList) apptList.style.display = 'none';
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) apptDet.style.display = 'block';
}

function showServiceCategorySelection() {
    // Check if cart has items before going back
    if (cart.length > 0) {
        // Show confirmation modal
        const releaseModal = new bootstrap.Modal(document.getElementById('releaseSlotModal'));
        releaseModal.show();
        
        // Set up the continue button action for desktop
        document.getElementById('confirmReleaseBtn').onclick = function() {
            // Hide appointment list and show service category selection
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            const apptDet = document.getElementById('appointment-details');
            if (apptDet) apptDet.style.display = 'none';
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
        
        // Set up the continue button action for mobile
        document.getElementById('confirmReleaseBtnMobile').onclick = function() {
            // Hide appointment list and show service category selection
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            const apptDet = document.getElementById('appointment-details');
            if (apptDet) apptDet.style.display = 'none';
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
    } else {
        // No items in cart, proceed without confirmation
        // Hide appointment list and show service category selection
        document.getElementById('appointment-list').style.display = 'none';
        document.getElementById('appointment-selection').style.display = 'none';
        const apptDet = document.getElementById('appointment-details');
        if (apptDet) apptDet.style.display = 'none';
        document.getElementById('service-category-selection').style.display = 'block';
    }
}

// Direct navigation to service category selection without confirmation modal
// Used by the back button in AppointmentDetails
function showServiceCategorySelectionDirect() {
    // Hide appointment list and show service category selection
    const apptList = document.getElementById('appointment-list');
    if (apptList) {
        apptList.style.display = 'none';
        apptList.classList.add('display-none');
    }
    
    const apptSel = document.getElementById('appointment-selection');
    if (apptSel) {
        apptSel.style.display = 'none';
        apptSel.classList.add('display-none');
    }
    
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) {
        apptDet.style.display = 'none';
        apptDet.classList.add('display-none');
    }
    
    const serviceCatSel = document.getElementById('service-category-selection');
    if (serviceCatSel) {
        serviceCatSel.style.display = 'block';
        serviceCatSel.classList.remove('display-none');
    }
    
    // Scroll to top of page
    window.scrollTo(0, 0);
}

function showDateTimeSelection() {
    // Hide appointment selection and show date/time selection
    document.getElementById('appointment-selection').style.display = 'none';
    const dateTimeSection = document.getElementById('date-time-selection');
    if (dateTimeSection) {
        dateTimeSection.style.display = 'block';
    }
}

// Initialize calendar when page loads
document.addEventListener('DOMContentLoaded', function() {
    generateCalendar();
    
    // Initialize mobile and tablet view state
    // Support mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        const timeslotsSection = document.getElementById('timeslots-section');
        if (timeslotsSection) {
            timeslotsSection.classList.remove('mobile-show-timeslots');
        }
    }
    
    // Initialize Bootstrap modal
    if (typeof bootstrap !== 'undefined') {
        // Bootstrap is loaded
    } else {
        console.warn('Bootstrap is required for modal functionality');
    }
    
    // Show branch selection by default (first page) - only if elements exist
    const serviceCategory = document.getElementById('service-category');
    if (serviceCategory) {
        serviceCategory.style.display = 'block';
        serviceCategory.classList.remove('display-none');
    }
    
    const serviceCategorySelection = document.getElementById('service-category-selection');
    if (serviceCategorySelection) {
        serviceCategorySelection.style.display = 'none';
        serviceCategorySelection.classList.add('display-none');
    }
    
    const appointmentList = document.getElementById('appointment-list');
    if (appointmentList) {
        appointmentList.style.display = 'none';
        appointmentList.classList.add('display-none');
    }
    
    const appointmentSelection = document.getElementById('appointment-selection');
    if (appointmentSelection) {
        appointmentSelection.style.display = 'none';
        appointmentSelection.classList.add('display-none');
    }
    
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) {
        apptDet.style.display = 'none';
        apptDet.classList.add('display-none');
    }
    
    // Hide other scheduler sections initially
    const dateTimeSection = document.getElementById('date-time-selection');
    if (dateTimeSection) {
        dateTimeSection.style.display = 'none';
        dateTimeSection.classList.add('display-none');
    }
    
    const informationView = document.getElementById('information-view');
    if (informationView) {
        informationView.style.display = 'none';
        informationView.classList.add('display-none');
    }
    
    const datetimeSelection = document.getElementById('datetime-selection');
    if (datetimeSelection) {
        datetimeSelection.style.display = 'none';
        datetimeSelection.classList.add('display-none');
    }
    
    const paymentMethodView = document.getElementById('payment-method-view');
    if (paymentMethodView) {
        paymentMethodView.style.display = 'none';
        paymentMethodView.classList.add('display-none');
    }
    
    // Initialize cart (empty by default)
    updateCartDisplay();
    
    // Move the cart section to the body element to ensure it's visible across all pages
    const cartSection = document.getElementById('cart-section');
    if (cartSection) {
        document.body.appendChild(cartSection);
    }
});

// Cart functionality
let currentSelectedService = '';

function addToCart() {
    // Use the stored selected service or try to get it from various sources
    let selectedService = currentSelectedService;
    
    if (!selectedService) {
        // Try to get from appointment info elements
        const infoElement = document.getElementById('info-appointment-name');
        if (infoElement && infoElement.textContent) {
            // Extract service from appointment name if it contains service info
            const appointmentText = infoElement.textContent;
            if (appointmentText.includes('Hair')) selectedService = 'Hair';
            else if (appointmentText.includes('Feet')) selectedService = 'Feet';
            else if (appointmentText.includes('Face')) selectedService = 'Face';
        }
    }
    
    // Fallback to Face if no service detected (for testing)
    if (!selectedService) {
        selectedService = 'Face';
    }
    
    // Sample prices for services matching the image
    const servicePrices = {
        'Hair': 560.00,
        'Feet': 450.00,
        'Face': 380.00
    };
    
    const price = servicePrices[selectedService] || 380.00;
    
    // Check if item already exists in cart
    const existingItem = cart.find(item => item.service === selectedService);
    
    if (existingItem) {
        existingItem.quantity += 1;
        existingItem.total = existingItem.quantity * existingItem.price;
    } else {
        cart.push({
            service: selectedService,
            appointment: selectedService + ' Service',
            details: 'Selected appointment',
            price: price,
            quantity: 1,
            total: price
        });
    }
    
    updateCartDisplay();
}

function removeFromCart(index) {
    cart.splice(index, 1);
    updateCartDisplay();
}

function updateQuantity(index, change) {
    if (cart[index]) {
        cart[index].quantity += change;
        if (cart[index].quantity <= 0) {
            removeFromCart(index);
        } else {
            cart[index].total = cart[index].quantity * cart[index].price;
            updateCartDisplay();
        }
    }
}

function updateCartDisplay() {
    const cartContainer = document.getElementById('cart-items');
    const cartCount = document.getElementById('cart-count');
    const cartTotalElement = document.getElementById('cart-total');
    const cartSection = document.getElementById('cart-section');
    
    // Calculate total
    cartTotal = cart.reduce((sum, item) => sum + item.total, 0);
    
    // Update cart count
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    if (cartCount) {
        cartCount.textContent = totalItems;
    }
    
    // Update total price
    if (cartTotalElement) {
        cartTotalElement.textContent = `Php${cartTotal.toFixed(2)}`;
    }
    
    // Show/hide cart section based on cart contents only (not completion status)
    // This ensures cart persists across pages once it appears
    if (cartSection) {
        cartSection.style.display = (cart.length > 0) ? 'block' : 'none';
    }
    
    // Update cart items display (if needed for expanded view)
    if (cartContainer) {
        cartContainer.innerHTML = '';
        cart.forEach((item, index) => {
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item d-flex justify-content-between align-items-center mb-2';
            cartItem.innerHTML = `
                <div>
                    <div class="fw-500">${item.service}</div>
                    <div class="text-muted small">${item.appointment}</div>
                </div>
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary" onclick="updateQuantity(${index}, -1)">-</button>
                    <span class="mx-2">${item.quantity}</span>
                    <button class="btn btn-sm btn-outline-secondary" onclick="updateQuantity(${index}, 1)">+</button>
                    <span class="ms-3">Php${item.total.toFixed(2)}</span>
                </div>
            `;
            cartContainer.appendChild(cartItem);
        });
    }
}

function getCurrentSelectedService() {
    // This function should return the currently selected service
    // For now, we'll try to get it from various possible sources
    const selectedCategoryElement = document.getElementById('selected-category-name');
    if (selectedCategoryElement && selectedCategoryElement.textContent) {
        return selectedCategoryElement.textContent;
    }
    
    // Fallback: check which service button was last clicked
    const selectedService = document.querySelector('.service-item .btn[data-service]');
    if (selectedService) {
        return selectedService.getAttribute('data-service');
    }
    
    return 'Service'; // Default fallback
}

function proceedToCheckout() {
    if (cart.length === 0) {
        alert('Your cart is empty. Please add services first.');
        return;
    }
    
    // Hide service category selection and show payment method view
    document.getElementById('service-category-selection').style.display = 'none';
    
    // Hide cart section when going to payment
    const cartSection = document.getElementById('cart-section');
    if (cartSection) {
        cartSection.style.display = 'none';
        cartSection.classList.add('display-none');
    }
    
    // Navigate to payment method page
    showPaymentMethodView();
}

// Payment Method Functions
let selectedPaymentMethod = null;
let selectedBankOption = null;
let selectedEwalletOption = null;

function showPaymentMethodView() {
    // Hide information view
    document.getElementById('information-view').style.display = 'none';
    
    // Show payment method view
    const paymentView = document.getElementById('payment-method-view');
    paymentView.classList.remove('display-none');
    paymentView.style.display = 'block';
    
    // Initialize event listeners after view is shown
    initializePaymentEventListeners();
}

function showInformationView() {
    // Hide payment method view
    document.getElementById('payment-method-view').style.display = 'none';
    document.getElementById('payment-method-view').classList.add('display-none');
    
    // Show information view
    document.getElementById('information-view').style.display = 'block';
}

function backToServiceCategoryFromPayment() {
    // Check if cart has items before going back
    if (cart.length > 0) {
        // Show confirmation modal
        const releaseModal = new bootstrap.Modal(document.getElementById('releaseSlotModal'));
        releaseModal.show();
        
        // Set up the continue button action for desktop
        document.getElementById('confirmReleaseBtn').onclick = function() {
            // Clear cart and reset
            cart = [];
            cartTotal = 0;
            hasCompletedInformation = false;
            updateCartDisplay();
            
            // Hide payment method view
            document.getElementById('payment-method-view').style.display = 'none';
            document.getElementById('payment-method-view').classList.add('display-none');
            
            // Show service category selection
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide cart section
            const cartSection = document.getElementById('cart-section');
            if (cartSection) {
                cartSection.classList.add('display-none');
                cartSection.style.display = 'none';
            }
            
            // Close modal
            releaseModal.hide();
        };
        
        // Set up the continue button action for mobile
        document.getElementById('confirmReleaseBtnMobile').onclick = function() {
            // Clear cart and reset
            cart = [];
            cartTotal = 0;
            hasCompletedInformation = false;
            updateCartDisplay();
            
            // Hide payment method view
            document.getElementById('payment-method-view').style.display = 'none';
            document.getElementById('payment-method-view').classList.add('display-none');
            
            // Show service category selection
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide cart section
            const cartSection = document.getElementById('cart-section');
            if (cartSection) {
                cartSection.classList.add('display-none');
                cartSection.style.display = 'none';
            }
            
            // Close modal
            releaseModal.hide();
        };
    } else {
        // No items in cart, just go back
        document.getElementById('payment-method-view').style.display = 'none';
        document.getElementById('payment-method-view').classList.add('display-none');
        
        // Show service category selection
        document.getElementById('service-category-selection').style.display = 'block';
        
        // Show cart section if user has completed information
        if (hasCompletedInformation) {
            const cartSection = document.getElementById('cart-section');
            if (cartSection) {
                cartSection.classList.remove('display-none');
                cartSection.style.display = 'block';
            }
        }
    }
}

function initializePaymentEventListeners() {
    // Payment method clicks
    document.querySelectorAll('.payment-option[data-payment-type]').forEach(option => {
        const paymentType = option.getAttribute('data-payment-type');
        option.onclick = function(e) {
            if (e.target.tagName !== 'INPUT') {
                // Check if we're in mobile, tablet, or desktop view
                const isMobile = this.closest('#mobile-payment-page') !== null;
                const isTablet = this.closest('#tablet-payment-page') !== null;
                if (paymentType === 'ewallet') {
                    toggleEwalletOptions(isMobile, isTablet);
                } else if (paymentType === 'banking') {
                    toggleBankingOptions(isMobile, isTablet);
                }
            }
        };
    });
    
    // Bank option radio changes (Desktop)
    document.querySelectorAll('input[name="bank-option"]').forEach(radio => {
        radio.onchange = function() {
            selectedBankOption = this.value;
            updateBankSelection(this, false, false);
        };
    });
    
    // Bank option radio changes (Mobile)
    document.querySelectorAll('input[name="bank-option-mobile"]').forEach(radio => {
        radio.onchange = function() {
            selectedBankOption = this.value;
            updateBankSelection(this, true, false);
        };
    });
    
    // Bank option radio changes (Tablet)
    document.querySelectorAll('input[name="bank-option-tablet"]').forEach(radio => {
        radio.onchange = function() {
            selectedBankOption = this.value;
            updateBankSelection(this, false, true);
        };
    });
    
    // E-wallet option radio changes (Desktop)
    document.querySelectorAll('input[name="ewallet-option"]').forEach(radio => {
        radio.onchange = function() {
            selectedEwalletOption = this.value;
            updateEwalletSelection(this, false, false);
        };
    });
    
    // E-wallet option radio changes (Mobile)
    document.querySelectorAll('input[name="ewallet-option-mobile"]').forEach(radio => {
        radio.onchange = function() {
            selectedEwalletOption = this.value;
            updateEwalletSelection(this, true, false);
        };
    });
    
    // E-wallet option radio changes (Tablet)
    document.querySelectorAll('input[name="ewallet-option-tablet"]').forEach(radio => {
        radio.onchange = function() {
            selectedEwalletOption = this.value;
            updateEwalletSelection(this, false, true);
        };
    });
}

function updateBankSelection(radio, isMobile, isTablet) {
    let containerId = '#banking-options';
    if (isMobile) containerId = '#banking-options-mobile';
    if (isTablet) containerId = '#banking-options-tablet';
    
    document.querySelectorAll(containerId + ' .bank-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    radio.closest('.bank-option').classList.add('selected');
}

function updateEwalletSelection(radio, isMobile, isTablet) {
    let containerId = '#ewallet-options';
    if (isMobile) containerId = '#ewallet-options-mobile';
    if (isTablet) containerId = '#ewallet-options-tablet';
    
    document.querySelectorAll(containerId + ' .bank-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    radio.closest('.bank-option').classList.add('selected');
}

function selectPaymentMethod(method) {
    selectedPaymentMethod = method;
    
    document.querySelectorAll('.payment-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    const selectedOption = document.getElementById('payment-' + method).closest('.payment-option');
    selectedOption.classList.add('selected');
    document.getElementById('payment-' + method).checked = true;
    
    if (method !== 'banking') {
        const bankingOptions = document.getElementById('banking-options');
        if (bankingOptions) bankingOptions.style.display = 'none';
    }
    if (method !== 'ewallet') {
        const ewalletOptions = document.getElementById('ewallet-options');
        if (ewalletOptions) ewalletOptions.style.display = 'none';
    }
}

function toggleEwalletOptions(isMobile = false, isTablet = false) {
    selectedPaymentMethod = 'ewallet';
    
    let suffix = '';
    if (isMobile) suffix = '-mobile';
    if (isTablet) suffix = '-tablet';
    
    const ewalletRadioId = 'payment-ewallet' + suffix;
    const ewalletOptionsId = 'ewallet-options' + suffix;
    const bankingOptionsId = 'banking-options' + suffix;
    
    // Only update options within the same context (mobile, tablet, or desktop)
    let context = document.querySelector('.payment-content-container');
    if (isMobile) context = document.getElementById('mobile-payment-page');
    if (isTablet) context = document.getElementById('tablet-payment-page');
    
    if (context) {
        context.querySelectorAll('.payment-option').forEach(option => {
            option.classList.remove('selected');
        });
    }
    
    const ewalletRadio = document.getElementById(ewalletRadioId);
    if (ewalletRadio) {
        const ewalletOption = ewalletRadio.closest('.payment-option');
        if (ewalletOption) ewalletOption.classList.add('selected');
        ewalletRadio.checked = true;
    }
    
    const bankingOptions = document.getElementById(bankingOptionsId);
    if (bankingOptions) bankingOptions.style.display = 'none';
    
    const ewalletOptions = document.getElementById(ewalletOptionsId);
    if (ewalletOptions) {
        ewalletOptions.style.display = (ewalletOptions.style.display === 'none' || ewalletOptions.style.display === '') ? 'block' : 'none';
    }
}

function toggleBankingOptions(isMobile = false, isTablet = false) {
    selectedPaymentMethod = 'banking';
    
    let suffix = '';
    if (isMobile) suffix = '-mobile';
    if (isTablet) suffix = '-tablet';
    
    const bankingRadioId = 'payment-banking' + suffix;
    const bankingOptionsId = 'banking-options' + suffix;
    const ewalletOptionsId = 'ewallet-options' + suffix;
    
    // Only update options within the same context (mobile, tablet, or desktop)
    let context = document.querySelector('.payment-content-container');
    if (isMobile) context = document.getElementById('mobile-payment-page');
    if (isTablet) context = document.getElementById('tablet-payment-page');
    
    if (context) {
        context.querySelectorAll('.payment-option').forEach(option => {
            option.classList.remove('selected');
        });
    }
    
    const bankingRadio = document.getElementById(bankingRadioId);
    if (bankingRadio) {
        const bankingOption = bankingRadio.closest('.payment-option');
        if (bankingOption) bankingOption.classList.add('selected');
        bankingRadio.checked = true;
    }
    
    const ewalletOptions = document.getElementById(ewalletOptionsId);
    if (ewalletOptions) ewalletOptions.style.display = 'none';
    
    const bankingOptions = document.getElementById(bankingOptionsId);
    if (bankingOptions) {
        bankingOptions.style.display = (bankingOptions.style.display === 'none' || bankingOptions.style.display === '') ? 'block' : 'none';
    }
}

function proceedToConfirmation() {
    if (!selectedPaymentMethod) {
        alert('Please select a payment method to continue.');
        return;
    }
    
    if (selectedPaymentMethod === 'banking' && !selectedBankOption) {
        alert('Please select a bank to continue.');
        return;
    }
    
    if (selectedPaymentMethod === 'ewallet' && !selectedEwalletOption) {
        alert('Please select an e-wallet to continue.');
        return;
    }
    
    // Reset cart and information state after successful payment
    hasCompletedInformation = false;
    cart = [];
    updateCartDisplay();
    
    window.location.href = '/Scheduler/user_view/Confirmed';
}

// ========================================
// Events Page Specific Scripts
// ========================================
// Mini Calendar
let miniCurrentDate = new Date();
let fullCurrentDate = new Date();
let selectedWeekStart = null;
let currentView = 'monthly'; // 'monthly' or 'daily'
let currentAppointment = null; // Store current appointment for cancellation
let weekDayOffset = 0; // Offset to show 5 days at a time (0-2): 0=Sun-Thu, 1=Mon-Fri, 2=Tue-Sat

// Sample appointments data - expanded for daily view
const appointments = [
    // Sunday appointments
    {
        id: 1,
        title: 'Morning Yoga',
        subtitle: 'Wellness Center',
        customerName: 'Sarah Johnson',
        phone: '(+123) 555-0201',
        email: 'sarah@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '06:00',
        endTime: '07:00',
        displayTime: '06:00 - 07:00 AM',
        duration: '60 minutes',
        price: 'Gé¦500.00',
        status: 'completed',
        scheduledDate: 'May 10, 2023 (Wed) at 09:00 AM',
        formAnswers: [
            { question: 'Experience level?', answer: 'Intermediate' }
        ],
        color: 'completed'
    },
    {
        id: 2,
        title: 'Spa Treatment',
        subtitle: 'Luxury Spa',
        customerName: 'Emma Davis',
        phone: '(+123) 555-0202',
        email: 'emma@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '08:00',
        endTime: '09:00',
        displayTime: '08:00 - 09:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1500.00',
        status: 'cancelled',
        scheduledDate: 'May 11, 2023 (Thu) at 10:00 AM',
        formAnswers: [
            { question: 'Any allergies?', answer: 'None' }
        ],
        color: 'cancelled'
    },
    {
        id: 3,
        title: 'Hair Coloring',
        subtitle: 'Beauty Salon',
        customerName: 'Olivia Martinez',
        phone: '(+123) 555-0203',
        email: 'olivia@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '10:00',
        endTime: '11:00',
        displayTime: '10:00 - 11:00 AM',
        duration: '60 minutes',
        price: 'Gé¦2000.00',
        status: 'refund-requested',
        scheduledDate: 'May 12, 2023 (Fri) at 11:00 AM',
        formAnswers: [
            { question: 'Preferred color?', answer: 'Ash blonde' }
        ],
        color: 'refund-requested'
    },
    
    // Monday appointments
    {
        id: 4,
        title: 'Dental Cleaning',
        subtitle: 'Smile Dental Clinic',
        customerName: 'Michael Brown',
        phone: '(+123) 555-0204',
        email: 'michael@example.com',
        date: new Date(2023, 4, 15), // May 15, 2023 (Monday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦800.00',
        status: 'refunded',
        scheduledDate: 'May 10, 2023 (Wed) at 02:00 PM',
        formAnswers: [
            { question: 'Last dental visit?', answer: '6 months ago' }
        ],
        color: 'refunded'
    },
    {
        id: 5,
        title: 'Personal Training',
        subtitle: 'Fitness First Gym',
        customerName: 'James Wilson',
        phone: '(+123) 555-0205',
        email: 'james@example.com',
        date: new Date(2023, 4, 15), // May 15, 2023 (Monday)
        startTime: '09:00',
        endTime: '10:00',
        displayTime: '09:00 - 10:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1200.00',
        status: 'booked',
        scheduledDate: 'May 13, 2023 (Sat) at 03:00 PM',
        formAnswers: [
            { question: 'Fitness goals?', answer: 'Build muscle' }
        ],
        color: 'booked'
    },
    {
        id: 6,
        title: 'Massage Therapy',
        subtitle: 'Relaxation Spa',
        customerName: 'Sophia Anderson',
        phone: '(+123) 555-0206',
        email: 'sophia@example.com',
        date: new Date(2023, 4, 15), // May 15, 2023 (Monday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '11:00 AM - 12:00 PM',
        duration: '60 minutes',
        price: 'Gé¦1000.00',
        status: 'completed',
        scheduledDate: 'May 12, 2023 (Fri) at 09:00 AM',
        formAnswers: [
            { question: 'Pressure preference?', answer: 'Medium' }
        ],
        color: 'completed'
    },
    
    // Tuesday appointments
    {
        id: 7,
        title: 'Eyebrow Thread',
        subtitle: 'SM Megamall - Face',
        customerName: 'Laybare',
        phone: '(+123) 555-0101',
        email: 'zerixuser@example.com',
        date: new Date(2023, 4, 16), // May 16, 2023 (Tuesday)
        startTime: '08:00',
        endTime: '09:00',
        displayTime: '08:00 - 09:00 AM',
        duration: '60 minutes',
        price: 'Gé¦450.00',
        status: 'cancelled',
        scheduledDate: 'May 14, 2023 (Sun) at 10:00 AM',
        formAnswers: [
            { question: 'How old are you?', answer: '24 years old' },
            { question: 'Do you have any allergies to medications?', answer: 'No' }
        ],
        color: 'cancelled'
    },
    {
        id: 8,
        title: 'Manicure & Pedicure',
        subtitle: 'Nail Salon',
        customerName: 'Isabella Garcia',
        phone: '(+123) 555-0207',
        email: 'isabella@example.com',
        date: new Date(2023, 4, 16), // May 16, 2023 (Tuesday)
        startTime: '10:00',
        endTime: '11:00',
        displayTime: '10:00 - 11:00 AM',
        duration: '60 minutes',
        price: 'Gé¦800.00',
        status: 'refund-requested',
        scheduledDate: 'May 13, 2023 (Sat) at 11:00 AM',
        formAnswers: [
            { question: 'Nail design preference?', answer: 'French tips' }
        ],
        color: 'refund-requested'
    },
    {
        id: 9,
        title: 'Facial Treatment',
        subtitle: 'Skin Care Center',
        customerName: 'Ava Thompson',
        phone: '(+123) 555-0208',
        email: 'ava@example.com',
        date: new Date(2023, 4, 16), // May 16, 2023 (Tuesday)
        startTime: '12:00',
        endTime: '13:00',
        displayTime: '12:00 - 01:00 PM',
        duration: '60 minutes',
        price: 'Gé¦1800.00',
        status: 'refunded',
        scheduledDate: 'May 11, 2023 (Thu) at 02:00 PM',
        formAnswers: [
            { question: 'Skin type?', answer: 'Combination' }
        ],
        color: 'refunded'
    },
    
    // Wednesday appointments
    {
        id: 10,
        title: 'Consultation',
        subtitle: 'Medical Clinic',
        customerName: 'Liam Martinez',
        phone: '(+123) 555-0209',
        email: 'liam@example.com',
        date: new Date(2023, 4, 17), // May 17, 2023 (Wednesday)
        startTime: '06:00',
        endTime: '07:00',
        displayTime: '06:00 - 07:00 AM',
        duration: '60 minutes',
        price: 'Gé¦600.00',
        status: 'booked',
        scheduledDate: 'May 15, 2023 (Mon) at 08:00 AM',
        formAnswers: [
            { question: 'Reason for visit?', answer: 'Annual checkup' }
        ],
        color: 'booked'
    },
    {
        id: 11,
        title: 'Laser Hair Removal',
        subtitle: 'Derma Clinic',
        customerName: 'Mia Robinson',
        phone: '(+123) 555-0210',
        email: 'mia@example.com',
        date: new Date(2023, 4, 17), // May 17, 2023 (Wednesday)
        startTime: '09:00',
        endTime: '10:00',
        displayTime: '09:00 - 10:00 AM',
        duration: '60 minutes',
        price: 'Gé¦3000.00',
        status: 'completed',
        scheduledDate: 'May 14, 2023 (Sun) at 03:00 PM',
        formAnswers: [
            { question: 'Treatment area?', answer: 'Underarms' }
        ],
        color: 'completed'
    },
    {
        id: 12,
        title: 'Acupuncture Session',
        subtitle: 'Holistic Health Center',
        customerName: 'Noah Lee',
        phone: '(+123) 555-0211',
        email: 'noah@example.com',
        date: new Date(2023, 4, 17), // May 17, 2023 (Wednesday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '11:00 AM - 12:00 PM',
        duration: '60 minutes',
        price: 'Gé¦1500.00',
        status: 'cancelled',
        scheduledDate: 'May 12, 2023 (Fri) at 10:00 AM',
        formAnswers: [
            { question: 'Previous experience?', answer: 'Yes, 3 sessions' }
        ],
        color: 'cancelled'
    },
    
    // Thursday appointments
    {
        id: 13,
        title: 'Pilates Class',
        subtitle: 'Studio Fitness',
        customerName: 'Charlotte Walker',
        phone: '(+123) 555-0212',
        email: 'charlotte@example.com',
        date: new Date(2023, 4, 18), // May 18, 2023 (Thursday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦700.00',
        status: 'refund-requested',
        scheduledDate: 'May 15, 2023 (Mon) at 11:00 AM',
        formAnswers: [
            { question: 'Experience level?', answer: 'Beginner' }
        ],
        color: 'refund-requested'
    },
    {
        id: 14,
        title: 'Nutrition Counseling',
        subtitle: 'Health & Wellness',
        customerName: 'Elijah Hall',
        phone: '(+123) 555-0213',
        email: 'elijah@example.com',
        date: new Date(2023, 4, 18), // May 18, 2023 (Thursday)
        startTime: '10:00',
        endTime: '11:00',
        displayTime: '10:00 - 11:00 AM',
        duration: '60 minutes',
        price: 'Gé¦900.00',
        status: 'refunded',
        scheduledDate: 'May 13, 2023 (Sat) at 01:00 PM',
        formAnswers: [
            { question: 'Dietary goals?', answer: 'Weight management' }
        ],
        color: 'refunded'
    },
    {
        id: 15,
        title: 'Chiropractic Adjustment',
        subtitle: 'Spine Care Clinic',
        customerName: 'Amelia Young',
        phone: '(+123) 555-0214',
        email: 'amelia@example.com',
        date: new Date(2023, 4, 18), // May 18, 2023 (Thursday)
        startTime: '12:00',
        endTime: '13:00',
        displayTime: '12:00 - 01:00 PM',
        duration: '60 minutes',
        price: 'Gé¦1100.00',
        status: 'booked',
        scheduledDate: 'May 16, 2023 (Tue) at 09:00 AM',
        formAnswers: [
            { question: 'Pain location?', answer: 'Lower back' }
        ],
        color: 'booked'
    },
    
    // Rescheduled by Admin appointments
    {
        id: 16,
        title: 'Hair Styling',
        subtitle: 'Beauty Lounge',
        customerName: 'Victoria Chen',
        phone: '(+123) 555-0215',
        email: 'victoria@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '09:00',
        endTime: '10:00',
        displayTime: '09:00 - 10:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1500.00',
        status: 'rescheduled-by-admin',
        scheduledDate: 'May 10, 2023 (Wed) at 11:00 AM',
        originalDate: 'May 13, 2023 (Sat)',
        newDate: 'May 14, 2023 (Sun)',
        originalTime: '02:00 - 03:00 PM',
        newTime: '09:00 - 10:00 AM',
        formAnswers: [
            { question: 'Hair type?', answer: 'Straight' },
            { question: 'Preferred style?', answer: 'Curls' }
        ],
        color: 'rescheduled-by-admin'
    },
    {
        id: 17,
        title: 'Skin Treatment',
        subtitle: 'Dermatology Center',
        customerName: 'Daniel Park',
        phone: '(+123) 555-0216',
        email: 'daniel@example.com',
        date: new Date(2023, 4, 16), // May 16, 2023 (Tuesday)
        startTime: '09:00',
        endTime: '10:00',
        displayTime: '09:00 - 10:00 AM',
        duration: '60 minutes',
        price: 'Gé¦2500.00',
        status: 'rescheduled-by-admin',
        scheduledDate: 'May 12, 2023 (Fri) at 03:00 PM',
        originalDate: 'May 15, 2023 (Mon)',
        newDate: 'May 16, 2023 (Tue)',
        originalTime: '03:00 - 04:00 PM',
        newTime: '09:00 - 10:00 AM',
        formAnswers: [
            { question: 'Skin concerns?', answer: 'Acne treatment' }
        ],
        color: 'rescheduled-by-admin'
    },
    {
        id: 18,
        title: 'Physical Therapy',
        subtitle: 'Rehab Center',
        customerName: 'Grace Kim',
        phone: '(+123) 555-0217',
        email: 'grace@example.com',
        date: new Date(2023, 4, 17), // May 17, 2023 (Wednesday)
        startTime: '08:00',
        endTime: '09:00',
        displayTime: '08:00 - 09:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1800.00',
        status: 'rescheduled-by-admin',
        scheduledDate: 'May 14, 2023 (Sun) at 01:00 PM',
        originalDate: 'May 16, 2023 (Tue)',
        newDate: 'May 17, 2023 (Wed)',
        originalTime: '11:00 AM - 12:00 PM',
        newTime: '08:00 - 09:00 AM',
        formAnswers: [
            { question: 'Injury type?', answer: 'Knee injury' }
        ],
        color: 'rescheduled-by-admin'
    },
    
    // Overlapping appointments with non-hourly time slots (Monday, May 15)
    {
        id: 19,
        title: 'Yoga Session',
        subtitle: 'Wellness Studio',
        customerName: 'Emily Roberts',
        phone: '(+123) 555-0218',
        email: 'emily@example.com',
        date: new Date(2023, 4, 15), // May 15, 2023 (Monday)
        startTime: '08:00',
        endTime: '09:00',
        displayTime: '08:00 - 09:00 AM',
        duration: '60 minutes',
        price: 'Gé¦750.00',
        status: 'completed',
        scheduledDate: 'May 12, 2023 (Fri) at 10:00 AM',
        formAnswers: [
            { question: 'Experience level?', answer: 'Advanced' }
        ],
        color: 'completed'
    },
    {
        id: 20,
        title: 'Meditation Class',
        subtitle: 'Mindfulness Center',
        customerName: 'David Chen',
        phone: '(+123) 555-0219',
        email: 'david@example.com',
        date: new Date(2023, 4, 15), // May 15, 2023 (Monday)
        startTime: '08:30',
        endTime: '09:30',
        displayTime: '08:30 - 09:30 AM',
        duration: '60 minutes',
        price: 'Gé¦500.00',
        status: 'booked',
        scheduledDate: 'May 13, 2023 (Sat) at 02:00 PM',
        formAnswers: [
            { question: 'Previous meditation experience?', answer: 'Beginner' }
        ],
        color: 'booked'
    },
    {
        id: 21,
        title: 'Stretching Session',
        subtitle: 'Fitness Hub',
        customerName: 'Rachel Green',
        phone: '(+123) 555-0220',
        email: 'rachel@example.com',
        date: new Date(2023, 4, 15), // May 15, 2023 (Monday)
        startTime: '08:30',
        endTime: '09:30',
        displayTime: '08:30 - 09:30 AM',
        duration: '60 minutes',
        price: 'Gé¦600.00',
        status: 'cancelled',
        scheduledDate: 'May 11, 2023 (Thu) at 04:00 PM',
        formAnswers: [
            { question: 'Flexibility level?', answer: 'Moderate' }
        ],
        color: 'cancelled'
    },
    
    // Overlapping appointments at exactly the same time (Sunday, May 14 at 7:00 AM)
    {
        id: 22,
        title: 'Optimum Repair',
        subtitle: 'Repair Shop',
        customerName: 'John Smith',
        phone: '(+123) 555-0221',
        email: 'john@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦850.00',
        status: 'booked',
        scheduledDate: 'May 10, 2023 (Wed) at 10:00 AM',
        formAnswers: [
            { question: 'Device type?', answer: 'Laptop' }
        ],
        color: 'booked'
    },
    {
        id: 23,
        title: 'Amer Vet Clinic',
        subtitle: 'Consultation',
        customerName: 'Jane Doe',
        phone: '(+123) 555-0222',
        email: 'jane@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1200.00',
        status: 'completed',
        scheduledDate: 'May 11, 2023 (Thu) at 11:00 AM',
        formAnswers: [
            { question: 'Pet type?', answer: 'Dog' }
        ],
        color: 'completed'
    },
    {
        id: 24,
        title: 'Pet Grooming',
        subtitle: 'Pet Care Center',
        customerName: 'Alice Brown',
        phone: '(+123) 555-0223',
        email: 'alice@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦900.00',
        status: 'booked',
        scheduledDate: 'May 12, 2023 (Fri) at 02:00 PM',
        formAnswers: [
            { question: 'Pet breed?', answer: 'Golden Retriever' }
        ],
        color: 'booked'
    },
    {
        id: 25,
        title: 'Veterinary Checkup',
        subtitle: 'Animal Hospital',
        customerName: 'Bob Wilson',
        phone: '(+123) 555-0224',
        email: 'bob@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦800.00',
        status: 'completed',
        scheduledDate: 'May 10, 2023 (Wed) at 03:00 PM',
        formAnswers: [
            { question: 'Vaccination needed?', answer: 'Yes' }
        ],
        color: 'completed'
    },
    {
        id: 26,
        title: 'Dog Training',
        subtitle: 'Obedience School',
        customerName: 'Carol Davis',
        phone: '(+123) 555-0225',
        email: 'carol@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1100.00',
        status: 'booked',
        scheduledDate: 'May 11, 2023 (Thu) at 01:00 PM',
        formAnswers: [
            { question: 'Training focus?', answer: 'Basic commands' }
        ],
        color: 'booked'
    },

    {
        id: 28,
        title: 'Bird Checkup',
        subtitle: 'Exotic Pet Clinic',
        customerName: 'Eva Martinez',
        phone: '(+123) 555-0227',
        email: 'eva@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦950.00',
        status: 'booked',
        scheduledDate: 'May 10, 2023 (Wed) at 05:00 PM',
        formAnswers: [
            { question: 'Bird species?', answer: 'Parrot' }
        ],
        color: 'booked'
    },
    {
        id: 29,
        title: 'Aquarium Setup',
        subtitle: 'Fish Care Service',
        customerName: 'Frank Garcia',
        phone: '(+123) 555-0228',
        email: 'frank@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1500.00',
        status: 'completed',
        scheduledDate: 'May 11, 2023 (Thu) at 09:00 AM',
        formAnswers: [
            { question: 'Tank size?', answer: '50 gallons' }
        ],
        color: 'completed'
    },
    {
        id: 30,
        title: 'Reptile Care',
        subtitle: 'Exotic Vet',
        customerName: 'Grace Anderson',
        phone: '(+123) 555-0229',
        email: 'gracea@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦1050.00',
        status: 'booked',
        scheduledDate: 'May 12, 2023 (Fri) at 10:00 AM',
        formAnswers: [
            { question: 'Reptile type?', answer: 'Bearded Dragon' }
        ],
        color: 'booked'
    },

    {
        id: 32,
        title: 'Rabbit Grooming',
        subtitle: 'Pet Spa',
        customerName: 'Iris Walker',
        phone: '(+123) 555-0231',
        email: 'iris@example.com',
        date: new Date(2023, 4, 14), // May 14, 2023 (Sunday)
        startTime: '07:00',
        endTime: '08:00',
        displayTime: '07:00 - 08:00 AM',
        duration: '60 minutes',
        price: 'Gé¦750.00',
        status: 'booked',
        scheduledDate: 'May 11, 2023 (Thu) at 03:00 PM',
        formAnswers: [
            { question: 'Rabbit breed?', answer: 'Holland Lop' }
        ],
        color: 'booked'
    }
];

function generateMiniCalendar() {
    const year = miniCurrentDate.getFullYear();
    const month = miniCurrentDate.getMonth();
    
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    
    const monthYearElement = document.getElementById('mini-calendar-month-year');
    if (monthYearElement) {
        monthYearElement.textContent = `${monthNames[month]} ${year}`;
    }
    
    const daysContainer = document.getElementById('mini-calendar-days');
    if (!daysContainer) return; // Exit if element doesn't exist
    
    daysContainer.innerHTML = '';
    
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Previous month days
    for (let i = firstDay - 1; i >= 0; i--) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = daysInPrevMonth - i;
        daysContainer.appendChild(dayElement);
    }
    
    // Current month days
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day';
        
        const date = new Date(year, month, day);
        const dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday
        
        // Add beige background for all days of the week (Sun-Sat: 0-6)
        if (dayOfWeek >= 0 && dayOfWeek <= 6) {
            dayElement.classList.add('weekday-highlight');
        }
        
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
        }
        
        // Check if this is the selected date
        if (fullCurrentDate && date.getDate() === fullCurrentDate.getDate() && 
            date.getMonth() === fullCurrentDate.getMonth() && 
            date.getFullYear() === fullCurrentDate.getFullYear()) {
            dayElement.classList.add('selected');
        }
        
        dayElement.textContent = day;
        dayElement.onclick = function() { selectMiniDate(date); };
        daysContainer.appendChild(dayElement);
    }
    
    // Next month days
    const totalCells = daysContainer.children.length;
    const remainingCells = 42 - totalCells;
    for (let day = 1; day <= remainingCells; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = day;
        daysContainer.appendChild(dayElement);
    }
}

function selectMiniDate(date) {
    fullCurrentDate = new Date(date);
    
    // Calculate the week start (Sunday)
    const dayOfWeek = date.getDay();
    selectedWeekStart = new Date(date);
    selectedWeekStart.setDate(date.getDate() - dayOfWeek);
    
    // Set offset to ensure selected date is visible in 5-day window
    if (dayOfWeek <= 4) {
        // Sun-Thu: Show Sun-Thu (offset 0)
        weekDayOffset = 0;
    } else if (dayOfWeek === 5) {
        // Fri: Show Mon-Fri (offset 1)
        weekDayOffset = 1;
    } else {
        // Sat: Show Tue-Sat (offset 2)
        weekDayOffset = 2;
    }
    
    // Regenerate mini calendar to update selected state
    generateMiniCalendar();
    
    updateFullCalendar();
}

function previousMonthMini() {
    miniCurrentDate.setMonth(miniCurrentDate.getMonth() - 1);
    generateMiniCalendar();
}

function nextMonthMini() {
    miniCurrentDate.setMonth(miniCurrentDate.getMonth() + 1);
    generateMiniCalendar();
}

function previousPeriod() {
    if (currentView === 'daily') {
        fullCurrentDate.setDate(fullCurrentDate.getDate() - 1);
    } else {
        // For monthly view, move by 5 days or adjust offset
        if (weekDayOffset > 0) {
            // Can shift offset backward
            weekDayOffset--;
        } else {
            // At beginning of week, go to previous week and show last 5 days (offset 2)
            if (selectedWeekStart) {
                selectedWeekStart.setDate(selectedWeekStart.getDate() - 7);
                fullCurrentDate = new Date(selectedWeekStart);
            } else {
                fullCurrentDate.setDate(fullCurrentDate.getDate() - 7);
            }
            weekDayOffset = 2; // Show Tue-Sat of previous week
        }
    }
    updateFullCalendar();
}

function nextPeriod() {
    if (currentView === 'daily') {
        fullCurrentDate.setDate(fullCurrentDate.getDate() + 1);
    } else {
        // For monthly view, move by 5 days or adjust offset
        if (weekDayOffset < 2) {
            // Can shift offset forward
            weekDayOffset++;
        } else {
            // At end of week, go to next week and show first 5 days (offset 0)
            if (selectedWeekStart) {
                selectedWeekStart.setDate(selectedWeekStart.getDate() + 7);
                fullCurrentDate = new Date(selectedWeekStart);
            } else {
                fullCurrentDate.setDate(fullCurrentDate.getDate() + 7);
            }
            weekDayOffset = 0; // Show Sun-Thu of next week
        }
    }
    updateFullCalendar();
}

function switchView(view) {
    currentView = view;
    document.getElementById('current-view-label').textContent = view.charAt(0).toUpperCase() + view.slice(1);
    
    if (view === 'daily') {
        document.getElementById('monthly-view').style.display = 'none';
        document.getElementById('daily-view').style.display = 'block';
    } else {
        document.getElementById('monthly-view').style.display = 'block';
        document.getElementById('daily-view').style.display = 'none';
    }
    
    updateFullCalendar();
}

function updateFullCalendar() {
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    const dateStr = `${monthNames[fullCurrentDate.getMonth()]} ${fullCurrentDate.getDate()}, ${fullCurrentDate.getFullYear()}`;
    document.getElementById('full-calendar-date').textContent = dateStr;
    
    if (currentView === 'daily') {
        generateDailyView();
    } else {
        // Generate week header
        generateWeekHeader();
        
        // Generate time slots
        generateTimeSlots();
    }
}

function generateWeekHeader() {
    const weekHeader = document.getElementById('week-header');
    const timeColumn = weekHeader.querySelector('.time-column');
    
    // Clear existing day columns
    weekHeader.innerHTML = '';
    weekHeader.appendChild(timeColumn);
    
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const weekStart = selectedWeekStart || getWeekStart(fullCurrentDate);
    
    // Show only 5 days at a time based on offset
    for (let i = 0; i < 5; i++) {
        const dayIndex = i + weekDayOffset;
        const currentDay = new Date(weekStart);
        currentDay.setDate(weekStart.getDate() + dayIndex);
        
        const dayColumn = document.createElement('div');
        dayColumn.className = `day-column day-column-${i + 1}`;
        
        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        
        // Check if this is the selected date from mini calendar
        if (fullCurrentDate && currentDay.toDateString() === fullCurrentDate.toDateString()) {
            dayNumber.classList.add('orange-circle');
        }
        // Otherwise check if this is today
        else {
            const today = new Date();
            if (currentDay.toDateString() === today.toDateString()) {
                dayNumber.classList.add('orange-circle');
            }
        }
        
        dayNumber.textContent = currentDay.getDate();
        
        const dayName = document.createElement('div');
        dayName.className = 'day-name';
        dayName.textContent = dayNames[dayIndex];
        
        dayColumn.appendChild(dayNumber);
        dayColumn.appendChild(dayName);
        weekHeader.appendChild(dayColumn);
    }
}

function generateTimeSlots() {
    const timeSlotsGrid = document.getElementById('time-slots-grid');
    timeSlotsGrid.innerHTML = '';
    
    const hours = ['6 AM', '7 AM', '8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM'];
    const weekStart = selectedWeekStart || getWeekStart(fullCurrentDate);
    
    hours.forEach((hour, hourIndex) => {
        const timeRow = document.createElement('div');
        timeRow.className = 'time-row';
        
        const timeLabel = document.createElement('div');
        timeLabel.className = 'time-label';
        timeLabel.textContent = hour;
        timeRow.appendChild(timeLabel);
        
        // Create 5 day cells based on offset
        for (let i = 0; i < 5; i++) {
            const dayIndex = i + weekDayOffset;
            const timeCell = document.createElement('div');
            timeCell.className = 'time-cell';
            
            // Check if there are appointments for this time slot
            const currentDay = new Date(weekStart);
            currentDay.setDate(weekStart.getDate() + dayIndex);
            
            const appointmentsAtTime = findAllAppointmentsAtTime(currentDay, hourIndex + 6);
            
            if (appointmentsAtTime.length > 0) {
                // Show the first appointment
                const appointment = appointmentsAtTime[0];
                const eventDiv = document.createElement('div');
                eventDiv.className = `appointment-event event-${appointment.color}`;
                eventDiv.onclick = () => showAppointmentModal(appointment.id);
                
                const eventTitle = document.createElement('div');
                eventTitle.className = 'event-title';
                eventTitle.textContent = appointment.title;
                
                // Show overlap indicator if there are more appointments
                if (appointmentsAtTime.length > 1) {
                    const overlapBadge = document.createElement('span');
                    overlapBadge.className = 'overlap-badge';
                    overlapBadge.textContent = `+${appointmentsAtTime.length - 1}`;
                    eventTitle.appendChild(overlapBadge);
                }
                
                const eventSubtitle = document.createElement('div');
                eventSubtitle.className = 'event-subtitle';
                eventSubtitle.textContent = appointment.subtitle;
                
                const eventTime = document.createElement('div');
                eventTime.className = 'event-time';
                eventTime.textContent = appointment.displayTime || `${appointment.startTime} - ${appointment.endTime}`;
                
                eventDiv.appendChild(eventTitle);
                eventDiv.appendChild(eventSubtitle);
                eventDiv.appendChild(eventTime);
                
                timeCell.appendChild(eventDiv);
            }
            
            timeRow.appendChild(timeCell);
        }
        
        timeSlotsGrid.appendChild(timeRow);
    });
}

function getWeekStart(date) {
    const weekStart = new Date(date);
    const dayOfWeek = date.getDay();
    weekStart.setDate(date.getDate() - dayOfWeek);
    return weekStart;
}

function findAppointment(date, hour) {
    return appointments.find(apt => {
        const aptDate = apt.date;
        const aptHour = parseInt(apt.startTime.split(':')[0]);
        
        return aptDate.getFullYear() === date.getFullYear() &&
               aptDate.getMonth() === date.getMonth() &&
               aptDate.getDate() === date.getDate() &&
               aptHour === hour;
    });
}

function findAllAppointmentsAtTime(date, hour) {
    return appointments.filter(apt => {
        const aptDate = apt.date;
        const aptHour = parseInt(apt.startTime.split(':')[0]);
        
        return aptDate.getFullYear() === date.getFullYear() &&
               aptDate.getMonth() === date.getMonth() &&
               aptDate.getDate() === date.getDate() &&
               aptHour === hour;
    });
}

function findDailyAppointments(date, hour, minute = 0) {
    return appointments.filter(apt => {
        const aptDate = apt.date;
        const aptStartHour = parseInt(apt.startTime.split(':')[0]);
        const aptStartMinute = parseInt(apt.startTime.split(':')[1]);
        const aptEndHour = parseInt(apt.endTime.split(':')[0]);
        const aptEndMinute = parseInt(apt.endTime.split(':')[1]);
        
        // Check if appointment overlaps with this 30-minute time slot
        const slotStart = hour * 60 + minute; // Convert to minutes from midnight
        const slotEnd = slotStart + 30; // 30-minute slot
        const aptStart = aptStartHour * 60 + aptStartMinute;
        const aptEnd = aptEndHour * 60 + aptEndMinute;
        
        return aptDate.getFullYear() === date.getFullYear() &&
               aptDate.getMonth() === date.getMonth() &&
               aptDate.getDate() === date.getDate() &&
               aptStart < slotEnd && aptEnd > slotStart; // Overlapping check
    });
}

function showAppointmentModal(appointmentId) {
    const appointment = appointments.find(apt => apt.id === appointmentId);
    if (!appointment) return;
    
    // Store current appointment for later use
    currentAppointment = appointment;
    
    // Find all overlapping appointments at the same time
    const aptHour = parseInt(appointment.startTime.split(':')[0]);
    const overlappingAppointments = findAllAppointmentsAtTime(appointment.date, aptHour);
    
    // Check if modal is already open
    const modalElement = document.getElementById('appointmentDetailsModal');
    const isModalOpen = modalElement.classList.contains('show');
    
    // Show/hide appointments dropdown based on overlapping count
    const dropdownWrapper = document.getElementById('appointmentDropdownWrapper');
    if (overlappingAppointments.length > 1) {
        dropdownWrapper.style.display = 'block';
        
        // Update dropdown count
        document.getElementById('appointmentCount').textContent = `${overlappingAppointments.length} Appointments`;
        
        // Populate dropdown list
        const dropdownList = document.getElementById('appointmentDropdownList');
        dropdownList.innerHTML = '';
        
        overlappingAppointments.forEach(apt => {
            const listItem = document.createElement('li');
            const button = document.createElement('button');
            button.className = 'dropdown-item appointment-dropdown-item';
            button.textContent = apt.title;
            button.onclick = () => {
                // Update content without re-showing modal
                updateAppointmentModalContent(apt.id);
            };
            
            // Mark current appointment as active
            if (apt.id === appointmentId) {
                button.classList.add('active');
            }
            
            listItem.appendChild(button);
            dropdownList.appendChild(listItem);
        });
    } else {
        dropdownWrapper.style.display = 'none';
    }
    
    // Update modal content
    document.getElementById('appointmentCustomerName').textContent = appointment.customerName;
    document.getElementById('appointmentPhone').textContent = appointment.phone;
    document.getElementById('appointmentEmail').textContent = appointment.email;
    document.getElementById('appointmentServiceTitle').textContent = appointment.title;
    document.getElementById('appointmentServiceSubtitle').textContent = appointment.subtitle;
    
    // Format date
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const dateStr = `${monthNames[appointment.date.getMonth()]} ${appointment.date.getDate()}, ${appointment.date.getFullYear()} (${dayNames[appointment.date.getDay()]})`;
    
    // Handle rescheduled appointments with strikethrough
    const dateOriginalEl = document.getElementById('appointmentDateOriginal');
    const dateEl = document.getElementById('appointmentDate');
    const timeOriginalEl = document.getElementById('appointmentTimeOriginal');
    const timeEl = document.getElementById('appointmentTime');
    
    if (appointment.status === 'rescheduled-by-admin' && appointment.originalDate && appointment.newDate) {
        // Show original date with strikethrough
        dateOriginalEl.textContent = appointment.originalDate;
        dateOriginalEl.style.display = 'inline';
        dateEl.textContent = appointment.newDate;
        
        // Show original time with strikethrough
        timeOriginalEl.textContent = appointment.originalTime;
        timeOriginalEl.style.display = 'inline';
        timeEl.textContent = appointment.newTime;
    } else {
        // Normal display without strikethrough
        dateOriginalEl.style.display = 'none';
        dateEl.textContent = dateStr;
        
        timeOriginalEl.style.display = 'none';
        timeEl.textContent = appointment.displayTime;
    }
    
    document.getElementById('appointmentDuration').textContent = appointment.duration;
    document.getElementById('appointmentPrice').textContent = appointment.price;
    document.getElementById('appointmentScheduledInfo').textContent = `Scheduled on ${appointment.scheduledDate}`;
    
    // Update status badge
    const statusBadge = document.getElementById('appointmentStatus');
    const statusDot = statusBadge.querySelector('.status-dot');
    const statusText = statusBadge.querySelector('.status-text');
    
    // Remove all status classes
    statusDot.classList.remove('completed', 'cancelled', 'refund-requested', 'refunded', 'booked', 'rescheduled-by-admin');
    
    // Add appropriate status class and text
    statusDot.classList.add(appointment.status);
    
    const statusLabels = {
        'completed': 'Completed',
        'cancelled': 'Cancelled',
        'refund-requested': 'Refund Requested',
        'refunded': 'Refunded',
        'booked': 'Booked',
        'rescheduled-by-admin': 'Rescheduled by the Admin'
    };
    statusText.textContent = statusLabels[appointment.status] || appointment.status;
    
    // Update form answers
    const formAnswersList = document.getElementById('formAnswersList');
    formAnswersList.innerHTML = '';
    
    if (appointment.formAnswers && appointment.formAnswers.length > 0) {
        appointment.formAnswers.forEach(qa => {
            const answerItem = document.createElement('div');
            answerItem.className = 'form-answer-item';
            
            const question = document.createElement('div');
            question.className = 'form-question';
            question.textContent = qa.question;
            
            const answer = document.createElement('div');
            answer.className = 'form-answer';
            answer.textContent = qa.answer;
            
            answerItem.appendChild(question);
            answerItem.appendChild(answer);
            formAnswersList.appendChild(answerItem);
        });
    }
    
    // Show/hide appropriate action buttons based on status
    const defaultActions = document.querySelector('.default-actions');
    const rescheduledActions = document.querySelector('.rescheduled-actions');
    
    if (appointment.status === 'rescheduled-by-admin') {
        defaultActions.style.display = 'none';
        rescheduledActions.style.display = 'block';
    } else {
        defaultActions.style.display = 'block';
        rescheduledActions.style.display = 'none';
    }
    
    // Only show modal if it's not already open
    if (!isModalOpen) {
        const modal = new bootstrap.Modal(document.getElementById('appointmentDetailsModal'));
        modal.show();
    }
    
    // Wire up approve button click handlers
    const approveBtns = [document.getElementById('approveBtn'), document.getElementById('approveBtnMobile')];
    approveBtns.forEach(btn => {
        if (btn) {
            btn.onclick = () => showRescheduledConfirmation(appointment);
        }
    });
    
    // Wire up cancel button click handlers - prevent default modal close and show confirmation
    const cancelBtns = document.querySelectorAll('.appointment-cancel-btn, .appointment-cancel-btn-outline');
    cancelBtns.forEach(btn => {
        if (btn) {
            // Remove data-bs-dismiss to prevent automatic close
            btn.removeAttribute('data-bs-dismiss');
            btn.onclick = () => showCancelConfirmation();
        }
    });
}

// New function to update modal content without re-showing it
function updateAppointmentModalContent(appointmentId) {
    const appointment = appointments.find(apt => apt.id === appointmentId);
    if (!appointment) return;
    
    // Store current appointment for later use
    currentAppointment = appointment;
    
    // Find all overlapping appointments at the same time
    const aptHour = parseInt(appointment.startTime.split(':')[0]);
    const overlappingAppointments = findAllAppointmentsAtTime(appointment.date, aptHour);
    
    // Update dropdown list to reflect new active item
    const dropdownList = document.getElementById('appointmentDropdownList');
    dropdownList.innerHTML = '';
    
    overlappingAppointments.forEach(apt => {
        const listItem = document.createElement('li');
        const button = document.createElement('button');
        button.className = 'dropdown-item appointment-dropdown-item';
        button.textContent = apt.title;
        button.onclick = () => {
            updateAppointmentModalContent(apt.id);
        };
        
        // Mark current appointment as active
        if (apt.id === appointmentId) {
            button.classList.add('active');
        }
        
        listItem.appendChild(button);
        dropdownList.appendChild(listItem);
    });
    
    // Update modal content
    document.getElementById('appointmentCustomerName').textContent = appointment.customerName;
    document.getElementById('appointmentPhone').textContent = appointment.phone;
    document.getElementById('appointmentEmail').textContent = appointment.email;
    document.getElementById('appointmentServiceTitle').textContent = appointment.title;
    document.getElementById('appointmentServiceSubtitle').textContent = appointment.subtitle;
    
    // Format date
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const dateStr = `${monthNames[appointment.date.getMonth()]} ${appointment.date.getDate()}, ${appointment.date.getFullYear()} (${dayNames[appointment.date.getDay()]})`;
    
    // Handle rescheduled appointments with strikethrough
    const dateOriginalEl = document.getElementById('appointmentDateOriginal');
    const dateEl = document.getElementById('appointmentDate');
    const timeOriginalEl = document.getElementById('appointmentTimeOriginal');
    const timeEl = document.getElementById('appointmentTime');
    
    if (appointment.status === 'rescheduled-by-admin' && appointment.originalDate && appointment.newDate) {
        // Show original date with strikethrough
        dateOriginalEl.textContent = appointment.originalDate;
        dateOriginalEl.style.display = 'inline';
        dateEl.textContent = appointment.newDate;
        
        // Show original time with strikethrough
        timeOriginalEl.textContent = appointment.originalTime;
        timeOriginalEl.style.display = 'inline';
        timeEl.textContent = appointment.newTime;
    } else {
        // Normal display without strikethrough
        dateOriginalEl.style.display = 'none';
        dateEl.textContent = dateStr;
        
        timeOriginalEl.style.display = 'none';
        timeEl.textContent = appointment.displayTime;
    }
    
    document.getElementById('appointmentDuration').textContent = appointment.duration;
    document.getElementById('appointmentPrice').textContent = appointment.price;
    document.getElementById('appointmentScheduledInfo').textContent = `Scheduled on ${appointment.scheduledDate}`;
    
    // Update status badge
    const statusBadge = document.getElementById('appointmentStatus');
    const statusDot = statusBadge.querySelector('.status-dot');
    const statusText = statusBadge.querySelector('.status-text');
    
    // Remove all status classes
    statusDot.classList.remove('completed', 'cancelled', 'refund-requested', 'refunded', 'booked', 'rescheduled-by-admin');
    
    // Add appropriate status class and text
    statusDot.classList.add(appointment.status);
    
    const statusLabels = {
        'completed': 'Completed',
        'cancelled': 'Cancelled',
        'refund-requested': 'Refund Requested',
        'refunded': 'Refunded',
        'booked': 'Booked',
        'rescheduled-by-admin': 'Rescheduled by the Admin'
    };
    statusText.textContent = statusLabels[appointment.status] || appointment.status;
    
    // Update form answers
    const formAnswersList = document.getElementById('formAnswersList');
    formAnswersList.innerHTML = '';
    
    if (appointment.formAnswers && appointment.formAnswers.length > 0) {
        appointment.formAnswers.forEach(qa => {
            const answerItem = document.createElement('div');
            answerItem.className = 'form-answer-item';
            
            const question = document.createElement('div');
            question.className = 'form-question';
            question.textContent = qa.question;
            
            const answer = document.createElement('div');
            answer.className = 'form-answer';
            answer.textContent = qa.answer;
            
            answerItem.appendChild(question);
            answerItem.appendChild(answer);
            formAnswersList.appendChild(answerItem);
        });
    }
    
    // Show/hide appropriate action buttons based on status
    const defaultActions = document.querySelector('.default-actions');
    const rescheduledActions = document.querySelector('.rescheduled-actions');
    
    if (appointment.status === 'rescheduled-by-admin') {
        defaultActions.style.display = 'none';
        rescheduledActions.style.display = 'block';
    } else {
        defaultActions.style.display = 'block';
        rescheduledActions.style.display = 'none';
    }
    
    // Wire up approve button click handlers
    const approveBtns = [document.getElementById('approveBtn'), document.getElementById('approveBtnMobile')];
    approveBtns.forEach(btn => {
        if (btn) {
            btn.onclick = () => showRescheduledConfirmation(appointment);
        }
    });
    
    // Wire up cancel button click handlers
    const cancelBtns = document.querySelectorAll('.appointment-cancel-btn, .appointment-cancel-btn-outline');
    cancelBtns.forEach(btn => {
        if (btn) {
            btn.removeAttribute('data-bs-dismiss');
            btn.onclick = () => showCancelConfirmation();
        }
    });
}

function showRescheduledConfirmation(appointment) {
    // Close the details modal first
    const detailsModal = bootstrap.Modal.getInstance(document.getElementById('appointmentDetailsModal'));
    if (detailsModal) {
        detailsModal.hide();
    }
    
    // Format the dates for display - use the actual date/time values
    // If originalDate and newDate are provided, use them; otherwise format from appointment.date
    let originalDateTime, newDateTime;
    
    if (appointment.originalDate && appointment.originalTime) {
        originalDateTime = `${appointment.originalDate} at ${appointment.originalTime}`;
    } else {
        // Fallback formatting
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'];
        const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const date = appointment.date;
        originalDateTime = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()} (${dayNames[date.getDay()]}) at ${appointment.displayTime}`;
    }
    
    if (appointment.newDate && appointment.newTime) {
        newDateTime = `${appointment.newDate} at ${appointment.newTime}`;
    } else {
        newDateTime = originalDateTime; // Fallback
    }
    
    // Update the confirmation modal content
    document.getElementById('rescheduleOriginalDateTime').textContent = originalDateTime;
    document.getElementById('rescheduleNewDateTime').textContent = newDateTime;
    
    // Show the rescheduled confirmation modal
    setTimeout(() => {
        const rescheduledModal = new bootstrap.Modal(document.getElementById('appointmentRescheduledModal'));
        rescheduledModal.show();
    }, 300);
}

function showCancelConfirmation() {
    // Close the details modal first
    const detailsModal = bootstrap.Modal.getInstance(document.getElementById('appointmentDetailsModal'));
    if (detailsModal) {
        detailsModal.hide();
    }
    
    // Show the cancel confirmation modal
    setTimeout(() => {
        const cancelModal = new bootstrap.Modal(document.getElementById('cancelAppointmentModal'));
        cancelModal.show();
        
        // Wire up the "Yes, Cancel Appointment" button
        const confirmCancelBtns = [document.getElementById('confirmCancelBtn'), document.getElementById('confirmCancelBtnMobile')];
        confirmCancelBtns.forEach(btn => {
            if (btn) {
                btn.onclick = () => showAppointmentCancelled();
            }
        });
    }, 300);
}

function showAppointmentCancelled() {
    // Close the cancel confirmation modal
    const cancelModal = bootstrap.Modal.getInstance(document.getElementById('cancelAppointmentModal'));
    if (cancelModal) {
        cancelModal.hide();
    }
    
    // Format the appointment date/time for display
    let cancelledDateTime;
    
    if (currentAppointment) {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'];
        const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const date = currentAppointment.date;
        cancelledDateTime = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()} (${dayNames[date.getDay()]}) at ${currentAppointment.displayTime}`;
    } else {
        cancelledDateTime = 'your appointment';
    }
    
    // Update the cancelled modal content
    document.getElementById('cancelledDateTime').textContent = cancelledDateTime;
    
    // Show the appointment cancelled modal
    setTimeout(() => {
        const cancelledModal = new bootstrap.Modal(document.getElementById('appointmentCancelledModal'));
        cancelledModal.show();
    }, 300);
}

function editAppointmentInfo(event) {
    event.preventDefault();
    
    if (currentAppointment) {
        // Navigate to the edit information page with the appointment ID
        window.location.href = `/Scheduler/user_view/EditInformation?id=${currentAppointment.id}`;
    }
}

function generateDailyView() {
    const dailyHeader = document.getElementById('daily-header');
    
    // Clear and rebuild header
    dailyHeader.innerHTML = '';
    
    // Create time column with GMT label
    const timeColumn = document.createElement('div');
    timeColumn.className = 'time-column-daily';
    
    const gmtLabel = document.createElement('div');
    gmtLabel.className = 'gmt-label';
    gmtLabel.textContent = 'GMT+07';
    timeColumn.appendChild(gmtLabel);
    
    dailyHeader.appendChild(timeColumn);
    
    // Create single day column
    const dayColumn = document.createElement('div');
    dayColumn.className = 'daily-day-column';
    
    const dayNumber = document.createElement('div');
    dayNumber.className = 'daily-day-number';
    dayNumber.textContent = fullCurrentDate.getDate();
    
    const dayName = document.createElement('div');
    dayName.className = 'daily-day-name';
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    dayName.textContent = dayNames[fullCurrentDate.getDay()];
    
    dayColumn.appendChild(dayNumber);
    dayColumn.appendChild(dayName);
    dailyHeader.appendChild(dayColumn);
    
    // Generate time slots for daily view
    const timeSlotsGrid = document.getElementById('daily-time-slots-grid');
    timeSlotsGrid.innerHTML = '';
    
    const hours = ['6 AM', '7 AM', '8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM'];
    
    // Get all appointments for the day
    const dayAppointments = appointments.filter(apt => {
        const aptDate = apt.date;
        return aptDate.getFullYear() === fullCurrentDate.getFullYear() &&
               aptDate.getMonth() === fullCurrentDate.getMonth() &&
               aptDate.getDate() === fullCurrentDate.getDate();
    });
    
    // Pre-calculate overlap groups for ALL appointments
    const appointmentColumns = new Map(); // Maps appointment ID to its column index
    const processedAppointments = new Set();
    
    // Sort all appointments by start time
    dayAppointments.sort((a, b) => {
        const aTime = parseInt(a.startTime.split(':')[0]) * 60 + parseInt(a.startTime.split(':')[1]);
        const bTime = parseInt(b.startTime.split(':')[0]) * 60 + parseInt(b.startTime.split(':')[1]);
        return aTime - bTime;
    });
    
    // Assign columns to appointments
    dayAppointments.forEach(appointment => {
        const startHour = parseInt(appointment.startTime.split(':')[0]);
        const startMinute = parseInt(appointment.startTime.split(':')[1]);
        const endHour = parseInt(appointment.endTime.split(':')[0]);
        const endMinute = parseInt(appointment.endTime.split(':')[1]);
        const startMinutes = startHour * 60 + startMinute;
        const endMinutes = endHour * 60 + endMinute;
        
        // Find all appointments that overlap with this one
        const overlappingAppts = dayAppointments.filter(apt => {
            const aptStartHour = parseInt(apt.startTime.split(':')[0]);
            const aptStartMinute = parseInt(apt.startTime.split(':')[1]);
            const aptEndHour = parseInt(apt.endTime.split(':')[0]);
            const aptEndMinute = parseInt(apt.endTime.split(':')[1]);
            const aptStartMinutes = aptStartHour * 60 + aptStartMinute;
            const aptEndMinutes = aptEndHour * 60 + aptEndMinute;
            
            // Check for time overlap
            return startMinutes < aptEndMinutes && endMinutes > aptStartMinutes;
        });
        
        // Find the first available column
        let column = 0;
        const usedColumns = overlappingAppts
            .filter(apt => appointmentColumns.has(apt.id))
            .map(apt => appointmentColumns.get(apt.id));
        
        while (usedColumns.includes(column)) {
            column++;
        }
        
        appointmentColumns.set(appointment.id, column);
        
        // Store max columns for this overlap group
        overlappingAppts.forEach(apt => {
            if (!apt.maxColumns || apt.maxColumns < overlappingAppts.length) {
                apt.maxColumns = overlappingAppts.length;
            }
        });
    });
    
    // Create time rows with a shared appointments container
    hours.forEach((hour, hourIndex) => {
        const timeRow = document.createElement('div');
        timeRow.className = 'daily-time-row';
        
        const timeLabel = document.createElement('div');
        timeLabel.className = 'daily-time-label';
        timeLabel.textContent = hour;
        timeRow.appendChild(timeLabel);
        
        const timeCell = document.createElement('div');
        timeCell.className = 'daily-time-cell';
        timeCell.style.position = 'relative';
        timeCell.style.minHeight = '80px'; // Ensure consistent height
        
        // Add half-hour interval line
        const halfHourLine = document.createElement('div');
        halfHourLine.className = 'half-hour-line';
        timeCell.appendChild(halfHourLine);
        
        timeRow.appendChild(timeCell);
        timeSlotsGrid.appendChild(timeRow);
    });
    
    // Now place appointments directly in their corresponding time cells
    dayAppointments.forEach(appointment => {
        // Calculate appointment start time
        const startHour = parseInt(appointment.startTime.split(':')[0]);
        const startMinute = parseInt(appointment.startTime.split(':')[1]);
        const endHour = parseInt(appointment.endTime.split(':')[0]);
        const endMinute = parseInt(appointment.endTime.split(':')[1]);
        
        const startMinutes = startHour * 60 + startMinute;
        const endMinutes = endHour * 60 + endMinute;
        const durationMinutes = endMinutes - startMinutes;
        
        // Find which hour slot this appointment starts in
        const hourIndex = startHour - 6; // 6 AM is index 0
        
        if (hourIndex >= 0 && hourIndex < hours.length) {
            const timeRow = timeSlotsGrid.children[hourIndex];
            const timeCell = timeRow.querySelector('.daily-time-cell');
            
            // Get column assignment
            const column = appointmentColumns.get(appointment.id);
            const maxColumns = appointment.maxColumns || 1;
            
            // Calculate height based on duration (80px per hour)
            const height = (durationMinutes / 60) * 80;
            
            // Calculate vertical offset within the hour (for non-hour-aligned starts)
            const minuteOffset = (startMinute / 60) * 80;
            
            const eventDiv = document.createElement('div');
            eventDiv.className = `daily-appointment-event event-${appointment.color}`;
            eventDiv.style.position = 'absolute';
            eventDiv.style.top = `${minuteOffset}px`;
            eventDiv.style.height = `${Math.max(height - 4, 60)}px`;
            
            // Calculate horizontal positioning
            // Use fixed width for appointments to prevent cramping
            const appointmentWidth = 200; // Fixed width in pixels
            
            if (maxColumns > 1) {
                // Multiple overlapping appointments - place side by side with fixed width
                eventDiv.style.left = `${column * (appointmentWidth + 8)}px`;
                eventDiv.style.width = `${appointmentWidth}px`;
            } else {
                // Single appointment - use full width
                eventDiv.style.left = '0';
                eventDiv.style.width = 'calc(100% - 8px)';
            }
            
            eventDiv.style.zIndex = column + 1;
            eventDiv.onclick = () => showAppointmentModal(appointment.id);
            
            const eventTitle = document.createElement('div');
            eventTitle.className = 'daily-event-title';
            
            // Create title text node
            const titleText = document.createTextNode(appointment.title);
            eventTitle.appendChild(titleText);
            
            // Add overlap badge only for the first appointment in overlapping groups
            if (maxColumns > 1 && column === 0) {
                const overlapBadge = document.createElement('span');
                overlapBadge.className = 'daily-overlap-badge';
                overlapBadge.textContent = `+${maxColumns - 1}`;
                eventTitle.appendChild(overlapBadge);
            }
            
            const eventSubtitle = document.createElement('div');
            eventSubtitle.className = 'daily-event-subtitle';
            eventSubtitle.textContent = appointment.subtitle;
            
            const eventTime = document.createElement('div');
            eventTime.className = 'daily-event-time';
            eventTime.textContent = appointment.displayTime;
            
            eventDiv.appendChild(eventTitle);
            eventDiv.appendChild(eventSubtitle);
            eventDiv.appendChild(eventTime);
            
            timeCell.appendChild(eventDiv);
        }
    });
}

// Mobile-specific functions
function generateMobileCalendar() {
    const year = miniCurrentDate.getFullYear();
    const month = miniCurrentDate.getMonth();
    
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    
    const monthYearElement = document.getElementById('mobile-calendar-month-year');
    if (monthYearElement) {
        monthYearElement.textContent = `${monthNames[month]} ${year}`;
    }
    
    const daysContainer = document.getElementById('mobile-calendar-days');
    if (!daysContainer) return; // Exit if element doesn't exist
    
    daysContainer.innerHTML = '';
    
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Previous month days
    for (let i = firstDay - 1; i >= 0; i--) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = daysInPrevMonth - i;
        daysContainer.appendChild(dayElement);
    }
    
    // Current month days
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day';
        
        const date = new Date(year, month, day);
        const dayOfWeek = date.getDay();
        
        if (dayOfWeek >= 0 && dayOfWeek <= 6) {
            dayElement.classList.add('weekday-highlight');
        }
        
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
        }
        
        dayElement.textContent = day;
        dayElement.onclick = function() { selectMobileDateAndShowSchedule(date); };
        daysContainer.appendChild(dayElement);
    }
    
    // Next month days
    const totalCells = daysContainer.children.length;
    const remainingCells = 42 - totalCells;
    for (let day = 1; day <= remainingCells; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = day;
        daysContainer.appendChild(dayElement);
    }
}

function selectMobileDateAndShowSchedule(date) {
    fullCurrentDate = new Date(date);
    
    // Set offset to ensure selected date is visible in 5-day window
    const dayOfWeek = date.getDay();
    if (dayOfWeek <= 4) {
        // Sun-Thu: Show Sun-Thu (offset 0)
        weekDayOffset = 0;
    } else if (dayOfWeek === 5) {
        // Fri: Show Mon-Fri (offset 1)
        weekDayOffset = 1;
    } else {
        // Sat: Show Tue-Sat (offset 2)
        weekDayOffset = 2;
    }
    
    // Show mobile daily view
    document.getElementById('mobile-calendar-view').style.display = 'none';
    document.getElementById('mobile-daily-view').style.display = 'block';
    
    // Update mobile schedule
    updateMobileDailyView();
}

function showMobileCalendar() {
    document.getElementById('mobile-daily-view').style.display = 'none';
    document.getElementById('mobile-calendar-view').style.display = 'block';
}

function previousDayMobile() {
    // Move by 5 days or adjust offset
    if (weekDayOffset > 0) {
        // Can shift offset backward
        weekDayOffset--;
        fullCurrentDate.setDate(fullCurrentDate.getDate() - 1);
    } else {
        // At beginning of week, go to previous week and show last 5 days
        fullCurrentDate.setDate(fullCurrentDate.getDate() - 7);
        weekDayOffset = 2; // Show Tue-Sat
    }
    updateMobileDailyView();
}

function nextDayMobile() {
    // Move by 5 days or adjust offset
    if (weekDayOffset < 2) {
        // Can shift offset forward
        weekDayOffset++;
        fullCurrentDate.setDate(fullCurrentDate.getDate() + 1);
    } else {
        // At end of week, go to next week and show first 5 days
        fullCurrentDate.setDate(fullCurrentDate.getDate() + 7);
        weekDayOffset = 0; // Show Sun-Thu
    }
    updateMobileDailyView();
}

function updateMobileDailyView() {
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    const dateStr = `${monthNames[fullCurrentDate.getMonth()]} ${fullCurrentDate.getDate()}, ${fullCurrentDate.getFullYear()}`;
    document.getElementById('mobile-selected-date').textContent = dateStr;
    
    // Update week days
    generateMobileWeekDays();
    
    // Generate time slots
    generateMobileTimeSlots();
}

function generateMobileWeekDays() {
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const weekStart = getWeekStart(fullCurrentDate);
    
    // Show only 5 days at a time based on offset
    for (let i = 0; i < 5; i++) {
        const dayIndex = i + weekDayOffset;
        const currentDay = new Date(weekStart);
        currentDay.setDate(weekStart.getDate() + dayIndex);
        
        const dayElement = document.getElementById(`mobile-day-${i}`);
        if (dayElement) {
            const dayNameEl = dayElement.querySelector('.day-name');
            const dayNumberEl = dayElement.querySelector('.day-number');
            
            dayNameEl.textContent = dayNames[dayIndex];
            dayNumberEl.textContent = currentDay.getDate();
            
            // Check if this is the selected date
            if (currentDay.toDateString() === fullCurrentDate.toDateString()) {
                dayElement.classList.add('active');
            } else {
                dayElement.classList.remove('active');
            }
            
            dayElement.onclick = function() {
                fullCurrentDate = new Date(currentDay);
                updateMobileDailyView();
            };
        }
    }
    
    // Hide the extra 2 day elements (mobile-day-5 and mobile-day-6)
    for (let i = 5; i < 7; i++) {
        const dayElement = document.getElementById(`mobile-day-${i}`);
        if (dayElement) {
            dayElement.style.display = 'none';
        }
    }
}

function generateMobileTimeSlots() {
    const timeSlotsContainer = document.getElementById('mobile-time-slots');
    timeSlotsContainer.innerHTML = '';
    
    // Include both full hours and half-hour marks
    const timeSlots = [
        { display: '6 AM', hour24: 6, minute: 0 },
        { display: '', hour24: 6, minute: 30, isHalfHour: true },
        { display: '7 AM', hour24: 7, minute: 0 },
        { display: '', hour24: 7, minute: 30, isHalfHour: true },
        { display: '8 AM', hour24: 8, minute: 0 },
        { display: '', hour24: 8, minute: 30, isHalfHour: true },
        { display: '9 AM', hour24: 9, minute: 0 },
        { display: '', hour24: 9, minute: 30, isHalfHour: true },
        { display: '10 AM', hour24: 10, minute: 0 },
        { display: '', hour24: 10, minute: 30, isHalfHour: true },
        { display: '11 AM', hour24: 11, minute: 0 },
        { display: '', hour24: 11, minute: 30, isHalfHour: true },
        { display: '12 PM', hour24: 12, minute: 0 },
        { display: '', hour24: 12, minute: 30, isHalfHour: true },
        { display: '1 PM', hour24: 13, minute: 0 },
        { display: '', hour24: 13, minute: 30, isHalfHour: true },
        { display: '2 PM', hour24: 14, minute: 0 },
        { display: '', hour24: 14, minute: 30, isHalfHour: true },
        { display: '3 PM', hour24: 15, minute: 0 },
        { display: '', hour24: 15, minute: 30, isHalfHour: true },
        { display: '4 PM', hour24: 16, minute: 0 },
        { display: '', hour24: 16, minute: 30, isHalfHour: true },
        { display: '5 PM', hour24: 17, minute: 0 },
        { display: '', hour24: 17, minute: 30, isHalfHour: true },
        { display: '6 PM', hour24: 18, minute: 0 },
        { display: '', hour24: 18, minute: 30, isHalfHour: true },
        { display: '7 PM', hour24: 19, minute: 0 },
        { display: '', hour24: 19, minute: 30, isHalfHour: true },
        { display: '8 PM', hour24: 20, minute: 0 },
        { display: '', hour24: 20, minute: 30, isHalfHour: true },
        { display: '9 PM', hour24: 21, minute: 0 },
        { display: '', hour24: 21, minute: 30, isHalfHour: true },
        { display: '10 PM', hour24: 22, minute: 0 },
        { display: '', hour24: 22, minute: 30, isHalfHour: true },
        { display: '11 PM', hour24: 23, minute: 0 },
        { display: '', hour24: 23, minute: 30, isHalfHour: true }
    ];
    
    timeSlots.forEach((timeSlot) => {
        const timeRow = document.createElement('div');
        timeRow.className = 'mobile-time-row';
        if (timeSlot.isHalfHour) {
            timeRow.classList.add('half-hour-row');
        }
        
        const timeLabel = document.createElement('div');
        timeLabel.className = 'mobile-time-label';
        timeLabel.textContent = timeSlot.display;
        timeRow.appendChild(timeLabel);
        
        const timeContent = document.createElement('div');
        timeContent.className = 'mobile-time-content';
        
        // Only show appointments on full hour rows
        if (!timeSlot.isHalfHour) {
            // Find appointments that START in this hour
            const hourAppointments = appointments.filter(apt => {
                const aptDate = apt.date;
                const aptStartHour = parseInt(apt.startTime.split(':')[0]);
                
                return aptDate.getFullYear() === fullCurrentDate.getFullYear() &&
                       aptDate.getMonth() === fullCurrentDate.getMonth() &&
                       aptDate.getDate() === fullCurrentDate.getDate() &&
                       aptStartHour === timeSlot.hour24;
            });
            
            if (hourAppointments.length > 0) {
                hourAppointments.forEach(apt => {
                    const card = document.createElement('div');
                    card.className = `mobile-appointment-card event-${apt.color}`;
                    card.onclick = () => showAppointmentModal(apt.id);
                    
                    const title = document.createElement('div');
                    title.className = 'event-title';
                    title.textContent = apt.title;
                    
                    const subtitle = document.createElement('div');
                    subtitle.className = 'event-subtitle';
                    subtitle.textContent = apt.subtitle;
                    
                    const time = document.createElement('div');
                    time.className = 'event-time';
                    time.textContent = apt.displayTime;
                    
                    card.appendChild(title);
                    card.appendChild(subtitle);
                    card.appendChild(time);
                    timeContent.appendChild(card);
                });
            }
        }
        
        timeRow.appendChild(timeContent);
        timeSlotsContainer.appendChild(timeRow);
    });
}

// Initialize calendars on page load
document.addEventListener('DOMContentLoaded', function() {
    // Set initial date to May 1, 2023 to match the reference
    miniCurrentDate = new Date(2023, 4, 1); // May 2023
    fullCurrentDate = new Date(2023, 4, 15); // May 15, 2023
    selectedWeekStart = new Date(2023, 4, 14); // Week starting May 14, 2023
    
    // Set initial offset based on the current date (May 15 is Monday, day 1)
    const dayOfWeek = fullCurrentDate.getDay();
    if (dayOfWeek <= 4) {
        weekDayOffset = 0; // Show Sun-Thu
    } else if (dayOfWeek === 5) {
        weekDayOffset = 1; // Show Mon-Fri
    } else {
        weekDayOffset = 2; // Show Tue-Sat
    }
    
    // Generate desktop calendars
    generateMiniCalendar();
    updateFullCalendar();
    
    // Generate mobile calendar
    if (window.innerWidth < 768) {
        generateMobileCalendar();
    }
});

// Payment Method V2 Scripts
// Mobile navigation functions
function showMobilePaymentPageV2() {
    document.getElementById('mobile-items-page-v2').style.display = 'none';
    document.getElementById('mobile-payment-page-v2').style.display = 'block';
    window.scrollTo(0, 0);
}

function showMobileItemsPageV2() {
    document.getElementById('mobile-payment-page-v2').style.display = 'none';
    document.getElementById('mobile-items-page-v2').style.display = 'block';
    window.scrollTo(0, 0);
}

// Mobile payment processing
function proceedToPaymentMobile() {
    const selectedProvider = document.querySelector('input[name="payment-provider-mobile"]:checked');
    
    if (!selectedProvider) {
        alert('Please select a payment provider');
        return;
    }

    const provider = selectedProvider.value;
    console.log('Proceeding with payment provider:', provider);
    
    // Reset cart and information state after successful payment
    hasCompletedInformation = false;
    cart = [];
    updateCartDisplay();
    
    // Navigate to confirmation page
    window.location.href = '/Scheduler/user_view/Confirmed';
}

// Desktop payment processing
function proceedToPayment() {
    const selectedProvider = document.querySelector('input[name="payment-provider"]:checked');
    
    if (!selectedProvider) {
        alert('Please select a payment provider');
        return;
    }

    const provider = selectedProvider.value;
    console.log('Proceeding with payment provider:', provider);
    
    // Reset cart and information state after successful payment
    hasCompletedInformation = false;
    cart = [];
    updateCartDisplay();
    
    // Navigate to confirmation page
    window.location.href = '/Scheduler/user_view/Confirmed';
}

function backToServiceCategoryFromPayment() {
    // Navigate back to service category selection
    const paymentMethodView = document.getElementById('payment-method-view');
    if (paymentMethodView) {
        paymentMethodView.style.display = 'none';
        paymentMethodView.classList.add('display-none');
    }
    
    const serviceCategorySelection = document.getElementById('service-category-selection');
    if (serviceCategorySelection) {
        serviceCategorySelection.style.display = 'block';
        serviceCategorySelection.classList.remove('display-none');
    }
    
    window.scrollTo(0, 0);
}

// Toggle payment amount when checkbox is clicked
function togglePaymentAmount(view) {
    const fullAmount = '₱1800.00';
    const dueAmount = '₱690.00';
    
    console.log('togglePaymentAmount called with view:', view);
    
    if (view === 'mobile') {
        const checkbox = document.getElementById('payFullAmount');
        const dueAmountRow = document.getElementById('mobile-due-amount-row');
        const fullAmountSpan = document.getElementById('mobile-full-amount');
        const fullAmountLabel = document.getElementById('mobile-full-amount-label');
        const buttonAmount = document.getElementById('mobile-button-amount');
        const paymentButtonAmount = document.getElementById('mobile-payment-button-amount');
        
        console.log('Checkbox checked:', checkbox ? checkbox.checked : 'checkbox not found');
        console.log('Due amount row found:', !!dueAmountRow);
        
        if (checkbox && dueAmountRow && fullAmountSpan) {
            if (checkbox.checked) {
                // Hide the "Total Amount Due" row using class
                dueAmountRow.classList.add('hidden-row');
                dueAmountRow.style.display = 'none';
                // Make full amount bold and same size as due amount was
                fullAmountSpan.classList.remove('fw-semibold');
                fullAmountSpan.classList.add('fw-bold');
                // Make the label bold
                if (fullAmountLabel) {
                    fullAmountLabel.classList.remove('text-muted');
                    fullAmountLabel.classList.add('fw-bold');
                }
                // Update button amounts to full amount
                if (buttonAmount) buttonAmount.textContent = fullAmount;
                if (paymentButtonAmount) paymentButtonAmount.textContent = fullAmount;
                console.log('Checkbox checked - hiding due amount row');
            } else {
                // Show the "Total Amount Due" row
                dueAmountRow.classList.remove('hidden-row');
                dueAmountRow.style.display = 'flex';
                // Restore original styling
                fullAmountSpan.classList.remove('fw-bold');
                fullAmountSpan.classList.add('fw-semibold');
                // Restore label styling
                if (fullAmountLabel) {
                    fullAmountLabel.classList.remove('fw-bold');
                    fullAmountLabel.classList.add('text-muted');
                }
                // Update button amounts to due amount
                if (buttonAmount) buttonAmount.textContent = dueAmount;
                if (paymentButtonAmount) paymentButtonAmount.textContent = dueAmount;
                console.log('Checkbox unchecked - showing due amount row');
            }
        } else {
            console.error('Required elements not found:', {
                checkbox: !!checkbox,
                dueAmountRow: !!dueAmountRow,
                fullAmountSpan: !!fullAmountSpan
            });
        }
    } else if (view === 'desktop') {
        const checkbox = document.getElementById('payFullAmountDesktop');
        const dueAmountRow = document.getElementById('desktop-due-amount-row');
        const fullAmountSpan = document.getElementById('desktop-full-amount');
        const fullAmountLabel = document.getElementById('desktop-full-amount-label');
        
        console.log('Desktop checkbox checked:', checkbox ? checkbox.checked : 'checkbox not found');
        
        if (checkbox && dueAmountRow && fullAmountSpan) {
            if (checkbox.checked) {
                // Hide the "Total Amount Due" row using class
                dueAmountRow.classList.add('hidden-row');
                dueAmountRow.style.display = 'none';
                // Make full amount bold and same size as due amount was
                fullAmountSpan.classList.remove('fw-semibold');
                fullAmountSpan.classList.add('fw-bold');
                // Make the label bold
                if (fullAmountLabel) {
                    fullAmountLabel.classList.remove('text-muted');
                    fullAmountLabel.classList.add('fw-bold');
                }
                console.log('Desktop checkbox checked - hiding due amount row');
            } else {
                // Show the "Total Amount Due" row
                dueAmountRow.classList.remove('hidden-row');
                dueAmountRow.style.display = 'flex';
                // Restore original styling
                fullAmountSpan.classList.remove('fw-bold');
                fullAmountSpan.classList.add('fw-semibold');
                // Restore label styling
                if (fullAmountLabel) {
                    fullAmountLabel.classList.remove('fw-bold');
                    fullAmountLabel.classList.add('text-muted');
                }
                console.log('Desktop checkbox unchecked - showing due amount row');
            }
        } else {
            console.error('Required desktop elements not found:', {
                checkbox: !!checkbox,
                dueAmountRow: !!dueAmountRow,
                fullAmountSpan: !!fullAmountSpan
            });
        }
    }
}
</script>
