<script>
let currentDate = new Date();
let selectedDate = null;
let selectedTime = null;
let cart = [];
let cartTotal = 0;
let hasCompletedInformation = false;

function selectAppointmentDetails(button) {
    // Hide appointment details and show datetime selection
    document.getElementById('appointment-details').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
    
    // Get appointment data from button attributes
    const appointmentName = button.getAttribute('data-appointment');
    const fee = button.getAttribute('data-fee');
    const duration = button.getAttribute('data-duration');
    
    // Update appointment info in the datetime selection view
    document.getElementById('companyName').textContent = 'SM Megamall - Face';
    document.getElementById('selected-appointment-name').textContent = appointmentName;
    document.getElementById('selected-appointment-details').textContent = duration;
    document.getElementById('selected-appointment-fee').textContent = fee ? `Reservation Fee: ${fee}` : '';
    
    // Initialize calendar and time slots
    generateCalendar();
    generateTimeSlots();

    // Reset time selection
    selectedTime = null;
    
    // Set default selected date to today + 1 (only on desktop)
    // On mobile/tablet, user must select date first before time slots appear
    if (window.innerWidth >= 1200) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        selectDate(tomorrow);
    }
}

function showDateTimeSelection(button) {
    document.getElementById('appointment-selection').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
    
    // Get appointment data from button attributes
    const appointmentName = button.getAttribute('data-appointment');
    const fee = button.getAttribute('data-fee');
    const duration = button.getAttribute('data-duration');
    
    // Update appointment info
    document.getElementById('companyName').textContent = 'Company Name';
    document.getElementById('selected-appointment-name').textContent = appointmentName;
    document.getElementById('selected-appointment-details').textContent = appointmentName;
    document.getElementById('selected-appointment-fee').textContent = duration;
    document.getElementById('selected-appointment-duration').textContent = fee;
    
    // Initialize calendar and time slots
    generateCalendar();
    generateTimeSlots();

    // Reset time selection dropdown
    selectedTime = null;
    document.getElementById('time-selection-dropdown').style.display = 'none';
    document.getElementById('selected-time-display').textContent = '';
    
    // Set default selected date to today + 1 (only on desktop)
    // On mobile/tablet, user must select date first before time slots appear
    if (window.innerWidth >= 1200) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        selectDate(tomorrow);
    }
}

function showAppointmentSelection() {
    document.getElementById('datetime-selection').style.display = 'none';
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'block';
}

function showDateTimeSelection() {
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
}

function goBack() {
    // Navigate back to the previous page or dashboard
    window.history.back();
}

// Generate time slots with fixed times as shown in the image
function generateTimeSlots() {
    const timeSlotsContainer = document.getElementById('time-slots');
    timeSlotsContainer.innerHTML = '';
    
    // Fixed time slots as shown in the image
    const timeSlots = [
        '9:00 am',
        '9:50 am',
        '10:40 am',
        '11:30 am',
        '12:20 pm',
        '1:10 pm',
        '2:00 pm',
        '2:50 pm',
        '3:40 pm',
        '4:30 pm',
        '5:20 pm',
        '6:10 pm',
        '7:00 pm',
        '7:50 pm',
        '8:40 pm',
        '9:30 pm',
    ];
    
    // Create time slot elements for each time
    timeSlots.forEach(timeString => {
        const timeSlot = document.createElement('div');
        timeSlot.className = 'time-slot';
        timeSlot.innerHTML = `
            <div class="time-slot-content">
                <div class="time-text">${timeString}</div>
                <div class="select-button select-button-hidden">Select</div>
            </div>
        `;
        timeSlot.onclick = () => selectTimeSlot(timeSlot, timeString);
        
        timeSlotsContainer.appendChild(timeSlot);
    });
}

// Scroll time slots up (show earlier times)
function scrollTimeUp() {
    const timeSlotsContainer = document.getElementById('time-slots');
    timeSlotsContainer.scrollTop -= 100;
}

// Scroll time slots down (show later times)
function scrollTimeDown() {
    const timeSlotsContainer = document.getElementById('time-slots');
    timeSlotsContainer.scrollTop += 100;
}

function generateCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // Update month/year display
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    document.getElementById('calendar-month-year').textContent = `${monthNames[month]} ${year}`;
    
    // Clear previous days
    const daysContainer = document.getElementById('calendar-days');
    daysContainer.innerHTML = '';
    
    // Get first day of month and number of days
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Add previous month's trailing days
    for (let i = firstDay - 1; i >= 0; i--) {
        const dayElement = createDayElement(daysInPrevMonth - i, true);
        daysContainer.appendChild(dayElement);
    }
    
    // Add current month's days
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = createDayElement(day, false);
        daysContainer.appendChild(dayElement);
    }
    
    // Add next month's leading days
    const totalCells = daysContainer.children.length;
    const remainingCells = 42 - totalCells; // 6 rows Ã— 7 days
    for (let day = 1; day <= remainingCells; day++) {
        const dayElement = createDayElement(day, true);
        daysContainer.appendChild(dayElement);
    }
}

function createDayElement(day, isOtherMonth) {
    const dayElement = document.createElement('div');
    dayElement.className = 'calendar-day';
    
    if (isOtherMonth) {
        dayElement.classList.add('other-month');
        dayElement.textContent = day;
    } else {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
        const today = new Date();
        const dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday
        
        // Add light circle highlight for Sun-Thu (0-4)
        if (dayOfWeek >= 0 && dayOfWeek <= 4) {
            dayElement.classList.add('weekday-highlight');
        }
        
        // Check if this is the selected date
        if (selectedDate && date.getDate() === selectedDate.getDate() && 
            date.getMonth() === selectedDate.getMonth() && 
            date.getFullYear() === selectedDate.getFullYear()) {
            dayElement.classList.add('selected');
        }
        
        // Create day number element
        dayElement.textContent = day;
        
        // Comment out the Today indicator
        /*
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
            // Add 'Today' label below the day number
            const todayLabel = document.createElement('span');
            todayLabel.className = 'today-label';
            todayLabel.textContent = 'Today';
            dayElement.appendChild(todayLabel);
        }
        */
        
        dayElement.onclick = () => selectDate(date);
    }
    
    return dayElement;
}

function selectDate(date) {
    selectedDate = date;
    
    // Update all calendar days to remove selected class
    const allDays = document.querySelectorAll('.calendar-day');
    allDays.forEach(day => day.classList.remove('selected'));
    
    // Find and select the correct day
    allDays.forEach(day => {
        if (!day.classList.contains('other-month')) {
            const dayNum = parseInt(day.textContent);
            const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), dayNum);
            
            if (dayDate.getDate() === date.getDate() && 
                dayDate.getMonth() === date.getMonth() && 
                dayDate.getFullYear() === date.getFullYear()) {
                day.classList.add('selected');
            }
        }
    });
    
    // Update selected date display
    const days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
    const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
    const dayName = days[date.getDay()];
    const monthName = months[date.getMonth()];
    const dayNumber = date.getDate();
    
    // Keep bold formatting when a date is selected
    const dateDisplay = document.getElementById('selected-date-display');
    dateDisplay.innerHTML = `<strong>${dayName}, ${monthName} ${dayNumber}</strong>`; // Keep strong tags
    
    // Keep bold on weekday headers
    const weekdayHeaders = document.querySelectorAll('.weekday');
    weekdayHeaders.forEach(header => {
        if (!header.querySelector('strong')) {
            header.innerHTML = `<strong>${header.textContent}</strong>`; // Ensure strong tags remain
        }
    });
    
    // Update weekday header colors based on selected weekday
    const headerNodes = document.querySelectorAll('.calendar-weekdays .weekday');
    headerNodes.forEach((header, idx) => {
        header.classList.remove('weekday-dim', 'weekday-active');
        if (idx === date.getDay()) {
            header.classList.add('weekday-active');
        } else {
            header.classList.add('weekday-dim');
        }
    });
    
    // Mobile and tablet-specific behavior: Show time slots after date selection
    // Includes mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        showTimeSlotsOnMobile();
    }
}

function selectTimeSlot(element, time) {
    // Only allow selection if a date has been selected first
    if (!selectedDate) {
        alert('Please select a date first.');
        return;
    }
    
    selectedTime = time;
    
    // Remove previous selection
    document.querySelectorAll('.time-slot').forEach(slot => {
        slot.classList.remove('time-selected');
        const submitBtn = slot.querySelector('.select-button');
        if (submitBtn) {
            submitBtn.classList.add('select-button-hidden');
            submitBtn.classList.remove('d-flex');
        }
    });
    
    // Add selection to clicked element
    element.classList.add('time-selected');
    const submitButton = element.querySelector('.select-button');
    if (submitButton) {
        submitButton.classList.remove('select-button-hidden');
        submitButton.classList.add('d-flex');
        
        // Add click handler to submit button
        submitButton.onclick = function(e) {
            e.stopPropagation(); // Prevent triggering the time slot click
            submitAppointment();
        };
    }
}

function submitAppointment() {
    if (!selectedDate || !selectedTime) {
        alert('Please select both date and time.');
        return;
    }
    
    // Update information view with selected appointment info
    const appointmentName = document.getElementById('selected-appointment-name').textContent;
    const appointmentDetails = document.getElementById('selected-appointment-details').textContent;
    const appointmentFee = document.getElementById('selected-appointment-fee').textContent;
    
    document.getElementById('info-appointment-name').textContent = appointmentName;
    document.getElementById('info-appointment-details').textContent = appointmentDetails;
    document.getElementById('info-appointment-fee').textContent = appointmentFee;
    
    // Hide date/time selection and show information view
    document.getElementById('datetime-selection').style.display = 'none';
    document.getElementById('information-view').style.display = 'block';
}

function confirmTime() {
    if (!selectedDate || !selectedTime) {
        alert('Please select both date and time.');
        return;
    }
    
    // Since we no longer use the information modal, directly proceed to the next step
    // For now, we'll just show an alert with the appointment details
    const appointmentName = document.getElementById('selected-appointment-name').textContent;
    const appointmentDuration = document.getElementById('selected-appointment-fee').textContent;
    const appointmentFee = document.getElementById('selected-appointment-duration').textContent;
    
    alert(`Appointment confirmed: ${appointmentName}, ${appointmentDuration}, ${appointmentFee}`);
    
    // You can add code here to proceed to the next step in your workflow
    // For example, redirect to another page or update the UI
}

function validateAge(input) {
    // Remove any non-numeric characters
    let value = input.value.replace(/[^0-9]/g, '');
    
    // Limit to 2 digits maximum
    if (value.length > 2) {
        value = value.slice(0, 2);
    }
    
    // Convert to number and validate range (1-99)
    let numValue = parseInt(value);
    if (numValue > 99) {
        value = '99';
    } else if (numValue < 1 && value.length > 0) {
        value = '1';
    }
    
    // Update the input value
    input.value = value;
}

function submitInformation() {
    // Validate age field before submission
    const ageInput = document.getElementById('age');
    const ageValue = ageInput.value;
    
    if (!ageValue || ageValue < 1 || ageValue > 99) {
        alert('Please enter a valid age between 1 and 99.');
        ageInput.focus();
        return;
    }
    
    // Mark that user has completed information flow
    hasCompletedInformation = true;
    
    // Add the current service to cart
    const appointmentName = document.getElementById('info-appointment-name').textContent;
    const appointmentDetails = document.getElementById('info-appointment-details').textContent;
    const appointmentFee = document.getElementById('info-appointment-fee').textContent;
    
    // Extract price from fee text (e.g., "Reservation Fee: â‚±90.00" -> 90.00)
    let price = 380.00; // Default price
    const feeMatch = appointmentFee.match(/â‚±([\d,]+\.?\d*)/);
    if (feeMatch) {
        price = parseFloat(feeMatch[1].replace(/,/g, ''));
    }
    
    // Format date and time for display
    const dateDisplay = selectedDate ? selectedDate.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
    }) : 'Date not selected';
    
    const timeDisplay = selectedTime || 'Time not selected';
    
    // Add to cart
    cart.push({
        service: appointmentName,
        appointment: appointmentName,
        details: appointmentDetails,
        date: dateDisplay,
        time: timeDisplay,
        price: price,
        quantity: 1,
        total: price
    });
    
    // Update cart display
    updateCartDisplay();
    
    // Navigate back to service category selection to add more services
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('service-category-selection').style.display = 'block';
    
    // Show cart section since user has completed information
    const cartSection = document.getElementById('cart-section');
    if (cartSection) {
        cartSection.classList.remove('display-none');
        cartSection.style.display = 'block';
    }
}

function previousMonth() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    generateCalendar();
}

function nextMonth() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    generateCalendar();
}

// Navigation functions
function showAppointmentSelection() {
    document.getElementById('datetime-selection').style.display = 'none';
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'block';
}

function showDateTimeView() {
    document.getElementById('information-view').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'none';
    document.getElementById('datetime-selection').style.display = 'block';
}

// Mobile and tablet calendar-first flow functions
function showTimeSlotsOnMobile() {
    // Support mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        const calendarSection = document.getElementById('calendar-section');
        const timeslotsSection = document.getElementById('timeslots-section');
        
        calendarSection.classList.add('mobile-hide-calendar');
        timeslotsSection.classList.add('mobile-show-timeslots');
    }
}

function showCalendarOnMobile() {
    // Support mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        const calendarSection = document.getElementById('calendar-section');
        const timeslotsSection = document.getElementById('timeslots-section');
        
        calendarSection.classList.remove('mobile-hide-calendar');
        timeslotsSection.classList.remove('mobile-show-timeslots');
    }
}

// New 4-page flow navigation functions
function showServiceCategory(button) {
    const branch = button.getAttribute('data-branch');
    
    // Hide branch selection and show service category selection
    document.getElementById('service-category').style.display = 'none';
    document.getElementById('service-category-selection').style.display = 'block';
    
    // Update selected branch display
    document.getElementById('selected-branch-name').textContent = branch;
}

function showBranchSelection() {
    // Check if cart has items before resetting
    if (cart.length > 0) {
        // Show confirmation modal
        const releaseModal = new bootstrap.Modal(document.getElementById('releaseSlotModal'));
        releaseModal.show();
        
        // Set up the continue button action for desktop
        document.getElementById('confirmReleaseBtn').onclick = function() {
            // Reset cart state when confirmed
            hasCompletedInformation = false;
            cart = [];
            updateCartDisplay();
            
            // Hide service category selection and show branch selection
            document.getElementById('service-category-selection').style.display = 'none';
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            document.getElementById('service-category').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
        
        // Set up the continue button action for mobile
        document.getElementById('confirmReleaseBtnMobile').onclick = function() {
            // Reset cart state when confirmed
            hasCompletedInformation = false;
            cart = [];
            updateCartDisplay();
            
            // Hide service category selection and show branch selection
            document.getElementById('service-category-selection').style.display = 'none';
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            document.getElementById('service-category').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
    } else {
        // No items in cart, proceed without confirmation
        hasCompletedInformation = false;
        
        // Hide service category selection and show branch selection
        document.getElementById('service-category-selection').style.display = 'none';
        document.getElementById('appointment-list').style.display = 'none';
        document.getElementById('appointment-selection').style.display = 'none';
        document.getElementById('service-category').style.display = 'block';
    }
}

function showAppointmentDetails(button) {
    const service = button ? button.getAttribute('data-service') : null;
    
    // Store the selected service for cart functionality
    if (service) {
        currentSelectedService = service;
    }
    
    // Hide all other sections explicitly
    const sectionsToHide = [
        'service-category',
        'appointment-list',
        'appointment-selection',
        'date-time-selection',
        'datetime-selection',
        'information-view',
        'service-category-selection'
    ];
    sectionsToHide.forEach(id => {
        const el = document.getElementById(id);
        if (el) el.style.display = 'none';
    });

    // Show appointment details
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) apptDet.style.display = 'block';
    
    // Optionally store or display selected service
    const selCat = document.getElementById('selected-category-name');
    if (selCat && service) selCat.textContent = service;
}

function selectAppointment(button) {
    const appointmentName = button.getAttribute('data-appointment');
    const fee = button.getAttribute('data-fee');
    const duration = button.getAttribute('data-duration');
    
    // Hide appointment list and show appointment selection
    document.getElementById('appointment-list').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'block';
    
    // Update selected appointment display in the info section
    document.getElementById('selected-appointment-name').textContent = appointmentName;
    document.getElementById('selected-appointment-details').textContent = `${duration}${fee ? ' - ' + fee : ''}`;
    
    // Update the final appointment card
    document.getElementById('final-appointment-name').textContent = appointmentName;
    document.getElementById('final-appointment-fee').textContent = fee || '';
    document.getElementById('final-appointment-duration').textContent = duration;
}

function showAppointmentList(arg) {
    // Compatibility: if called with a button (old markup), treat as Details navigation.
    if (arg) {
        return showAppointmentDetails(arg);
    }
    // Updated: In the new flow, going "back" from appointment selection should
    // return to the Appointment Details view, not the deprecated appointment list.
    const apptSel = document.getElementById('appointment-selection');
    if (apptSel) apptSel.style.display = 'none';
    const apptList = document.getElementById('appointment-list');
    if (apptList) apptList.style.display = 'none';
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) apptDet.style.display = 'block';
}

function showServiceCategorySelection() {
    // Check if cart has items before going back
    if (cart.length > 0) {
        // Show confirmation modal
        const releaseModal = new bootstrap.Modal(document.getElementById('releaseSlotModal'));
        releaseModal.show();
        
        // Set up the continue button action for desktop
        document.getElementById('confirmReleaseBtn').onclick = function() {
            // Hide appointment list and show service category selection
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            const apptDet = document.getElementById('appointment-details');
            if (apptDet) apptDet.style.display = 'none';
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
        
        // Set up the continue button action for mobile
        document.getElementById('confirmReleaseBtnMobile').onclick = function() {
            // Hide appointment list and show service category selection
            document.getElementById('appointment-list').style.display = 'none';
            document.getElementById('appointment-selection').style.display = 'none';
            const apptDet = document.getElementById('appointment-details');
            if (apptDet) apptDet.style.display = 'none';
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide the modal
            releaseModal.hide();
        };
    } else {
        // No items in cart, proceed without confirmation
        // Hide appointment list and show service category selection
        document.getElementById('appointment-list').style.display = 'none';
        document.getElementById('appointment-selection').style.display = 'none';
        const apptDet = document.getElementById('appointment-details');
        if (apptDet) apptDet.style.display = 'none';
        document.getElementById('service-category-selection').style.display = 'block';
    }
}

// Direct navigation to service category selection without confirmation modal
// Used by the back button in AppointmentDetails
function showServiceCategorySelectionDirect() {
    // Hide appointment list and show service category selection
    document.getElementById('appointment-list').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'none';
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) apptDet.style.display = 'none';
    document.getElementById('service-category-selection').style.display = 'block';
}

function showDateTimeSelection() {
    // Hide appointment selection and show date/time selection
    document.getElementById('appointment-selection').style.display = 'none';
    const dateTimeSection = document.getElementById('date-time-selection');
    if (dateTimeSection) {
        dateTimeSection.style.display = 'block';
    }
}

// Initialize calendar when page loads
document.addEventListener('DOMContentLoaded', function() {
    generateCalendar();
    
    // Initialize mobile and tablet view state
    // Support mobile (<= 768px), iPad Air (768px - 991px), and iPad Pro (992px - 1199px)
    if (window.innerWidth < 1200) {
        const timeslotsSection = document.getElementById('timeslots-section');
        if (timeslotsSection) {
            timeslotsSection.classList.remove('mobile-show-timeslots');
        }
    }
    
    // Initialize Bootstrap modal
    if (typeof bootstrap !== 'undefined') {
        // Bootstrap is loaded
    } else {
        console.warn('Bootstrap is required for modal functionality');
    }
    
    // Show branch selection by default (first page)
    document.getElementById('service-category').style.display = 'block';
    document.getElementById('service-category-selection').style.display = 'none';
    document.getElementById('appointment-list').style.display = 'none';
    document.getElementById('appointment-selection').style.display = 'none';
    const apptDet = document.getElementById('appointment-details');
    if (apptDet) apptDet.style.display = 'none';
    
    // Hide other scheduler sections initially
    const dateTimeSection = document.getElementById('date-time-selection');
    const informationView = document.getElementById('information-view');
    
    if (dateTimeSection) {
        dateTimeSection.style.display = 'none';
    }
    if (informationView) {
        informationView.style.display = 'none';
    }
    
    // Initialize cart (empty by default)
    updateCartDisplay();
    
    // Move the cart section to the body element to ensure it's visible across all pages
    const cartSection = document.getElementById('cart-section');
    if (cartSection) {
        document.body.appendChild(cartSection);
    }
});

// Cart functionality
let currentSelectedService = '';

function addToCart() {
    // Use the stored selected service or try to get it from various sources
    let selectedService = currentSelectedService;
    
    if (!selectedService) {
        // Try to get from appointment info elements
        const infoElement = document.getElementById('info-appointment-name');
        if (infoElement && infoElement.textContent) {
            // Extract service from appointment name if it contains service info
            const appointmentText = infoElement.textContent;
            if (appointmentText.includes('Hair')) selectedService = 'Hair';
            else if (appointmentText.includes('Feet')) selectedService = 'Feet';
            else if (appointmentText.includes('Face')) selectedService = 'Face';
        }
    }
    
    // Fallback to Face if no service detected (for testing)
    if (!selectedService) {
        selectedService = 'Face';
    }
    
    // Sample prices for services matching the image
    const servicePrices = {
        'Hair': 560.00,
        'Feet': 450.00,
        'Face': 380.00
    };
    
    const price = servicePrices[selectedService] || 380.00;
    
    // Check if item already exists in cart
    const existingItem = cart.find(item => item.service === selectedService);
    
    if (existingItem) {
        existingItem.quantity += 1;
        existingItem.total = existingItem.quantity * existingItem.price;
    } else {
        cart.push({
            service: selectedService,
            appointment: selectedService + ' Service',
            details: 'Selected appointment',
            price: price,
            quantity: 1,
            total: price
        });
    }
    
    updateCartDisplay();
}

function removeFromCart(index) {
    cart.splice(index, 1);
    updateCartDisplay();
}

function updateQuantity(index, change) {
    if (cart[index]) {
        cart[index].quantity += change;
        if (cart[index].quantity <= 0) {
            removeFromCart(index);
        } else {
            cart[index].total = cart[index].quantity * cart[index].price;
            updateCartDisplay();
        }
    }
}

function updateCartDisplay() {
    const cartContainer = document.getElementById('cart-items');
    const cartCount = document.getElementById('cart-count');
    const cartTotalElement = document.getElementById('cart-total');
    const cartSection = document.getElementById('cart-section');
    
    // Calculate total
    cartTotal = cart.reduce((sum, item) => sum + item.total, 0);
    
    // Update cart count
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    if (cartCount) {
        cartCount.textContent = totalItems;
    }
    
    // Update total price
    if (cartTotalElement) {
        cartTotalElement.textContent = `Php${cartTotal.toFixed(2)}`;
    }
    
    // Show/hide cart section based on cart contents only (not completion status)
    // This ensures cart persists across pages once it appears
    if (cartSection) {
        cartSection.style.display = (cart.length > 0) ? 'block' : 'none';
    }
    
    // Update cart items display (if needed for expanded view)
    if (cartContainer) {
        cartContainer.innerHTML = '';
        cart.forEach((item, index) => {
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item d-flex justify-content-between align-items-center mb-2';
            cartItem.innerHTML = `
                <div>
                    <div class="fw-500">${item.service}</div>
                    <div class="text-muted small">${item.appointment}</div>
                </div>
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary" onclick="updateQuantity(${index}, -1)">-</button>
                    <span class="mx-2">${item.quantity}</span>
                    <button class="btn btn-sm btn-outline-secondary" onclick="updateQuantity(${index}, 1)">+</button>
                    <span class="ms-3">Php${item.total.toFixed(2)}</span>
                </div>
            `;
            cartContainer.appendChild(cartItem);
        });
    }
}

function getCurrentSelectedService() {
    // This function should return the currently selected service
    // For now, we'll try to get it from various possible sources
    const selectedCategoryElement = document.getElementById('selected-category-name');
    if (selectedCategoryElement && selectedCategoryElement.textContent) {
        return selectedCategoryElement.textContent;
    }
    
    // Fallback: check which service button was last clicked
    const selectedService = document.querySelector('.service-item .btn[data-service]');
    if (selectedService) {
        return selectedService.getAttribute('data-service');
    }
    
    return 'Service'; // Default fallback
}

function proceedToCheckout() {
    if (cart.length === 0) {
        alert('Your cart is empty. Please add services first.');
        return;
    }
    
    // Hide service category selection and show payment method view
    document.getElementById('service-category-selection').style.display = 'none';
    
    // Hide cart section when going to payment
    const cartSection = document.getElementById('cart-section');
    if (cartSection) {
        cartSection.style.display = 'none';
        cartSection.classList.add('display-none');
    }
    
    // Navigate to payment method page
    showPaymentMethodView();
}

// Payment Method Functions
let selectedPaymentMethod = null;
let selectedBankOption = null;
let selectedEwalletOption = null;

function showPaymentMethodView() {
    // Hide information view
    document.getElementById('information-view').style.display = 'none';
    
    // Show payment method view
    const paymentView = document.getElementById('payment-method-view');
    paymentView.classList.remove('display-none');
    paymentView.style.display = 'block';
    
    // Initialize event listeners after view is shown
    initializePaymentEventListeners();
}

function showInformationView() {
    // Hide payment method view
    document.getElementById('payment-method-view').style.display = 'none';
    document.getElementById('payment-method-view').classList.add('display-none');
    
    // Show information view
    document.getElementById('information-view').style.display = 'block';
}

function backToServiceCategoryFromPayment() {
    // Check if cart has items before going back
    if (cart.length > 0) {
        // Show confirmation modal
        const releaseModal = new bootstrap.Modal(document.getElementById('releaseSlotModal'));
        releaseModal.show();
        
        // Set up the continue button action for desktop
        document.getElementById('confirmReleaseBtn').onclick = function() {
            // Clear cart and reset
            cart = [];
            cartTotal = 0;
            hasCompletedInformation = false;
            updateCartDisplay();
            
            // Hide payment method view
            document.getElementById('payment-method-view').style.display = 'none';
            document.getElementById('payment-method-view').classList.add('display-none');
            
            // Show service category selection
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide cart section
            const cartSection = document.getElementById('cart-section');
            if (cartSection) {
                cartSection.classList.add('display-none');
                cartSection.style.display = 'none';
            }
            
            // Close modal
            releaseModal.hide();
        };
        
        // Set up the continue button action for mobile
        document.getElementById('confirmReleaseBtnMobile').onclick = function() {
            // Clear cart and reset
            cart = [];
            cartTotal = 0;
            hasCompletedInformation = false;
            updateCartDisplay();
            
            // Hide payment method view
            document.getElementById('payment-method-view').style.display = 'none';
            document.getElementById('payment-method-view').classList.add('display-none');
            
            // Show service category selection
            document.getElementById('service-category-selection').style.display = 'block';
            
            // Hide cart section
            const cartSection = document.getElementById('cart-section');
            if (cartSection) {
                cartSection.classList.add('display-none');
                cartSection.style.display = 'none';
            }
            
            // Close modal
            releaseModal.hide();
        };
    } else {
        // No items in cart, just go back
        document.getElementById('payment-method-view').style.display = 'none';
        document.getElementById('payment-method-view').classList.add('display-none');
        
        // Show service category selection
        document.getElementById('service-category-selection').style.display = 'block';
        
        // Show cart section if user has completed information
        if (hasCompletedInformation) {
            const cartSection = document.getElementById('cart-section');
            if (cartSection) {
                cartSection.classList.remove('display-none');
                cartSection.style.display = 'block';
            }
        }
    }
}

function initializePaymentEventListeners() {
    // Payment method clicks
    document.querySelectorAll('.payment-option[data-payment-type]').forEach(option => {
        const paymentType = option.getAttribute('data-payment-type');
        option.onclick = function(e) {
            if (e.target.tagName !== 'INPUT') {
                // Check if we're in mobile, tablet, or desktop view
                const isMobile = this.closest('#mobile-payment-page') !== null;
                const isTablet = this.closest('#tablet-payment-page') !== null;
                if (paymentType === 'ewallet') {
                    toggleEwalletOptions(isMobile, isTablet);
                } else if (paymentType === 'banking') {
                    toggleBankingOptions(isMobile, isTablet);
                }
            }
        };
    });
    
    // Bank option radio changes (Desktop)
    document.querySelectorAll('input[name="bank-option"]').forEach(radio => {
        radio.onchange = function() {
            selectedBankOption = this.value;
            updateBankSelection(this, false, false);
        };
    });
    
    // Bank option radio changes (Mobile)
    document.querySelectorAll('input[name="bank-option-mobile"]').forEach(radio => {
        radio.onchange = function() {
            selectedBankOption = this.value;
            updateBankSelection(this, true, false);
        };
    });
    
    // Bank option radio changes (Tablet)
    document.querySelectorAll('input[name="bank-option-tablet"]').forEach(radio => {
        radio.onchange = function() {
            selectedBankOption = this.value;
            updateBankSelection(this, false, true);
        };
    });
    
    // E-wallet option radio changes (Desktop)
    document.querySelectorAll('input[name="ewallet-option"]').forEach(radio => {
        radio.onchange = function() {
            selectedEwalletOption = this.value;
            updateEwalletSelection(this, false, false);
        };
    });
    
    // E-wallet option radio changes (Mobile)
    document.querySelectorAll('input[name="ewallet-option-mobile"]').forEach(radio => {
        radio.onchange = function() {
            selectedEwalletOption = this.value;
            updateEwalletSelection(this, true, false);
        };
    });
    
    // E-wallet option radio changes (Tablet)
    document.querySelectorAll('input[name="ewallet-option-tablet"]').forEach(radio => {
        radio.onchange = function() {
            selectedEwalletOption = this.value;
            updateEwalletSelection(this, false, true);
        };
    });
}

function updateBankSelection(radio, isMobile, isTablet) {
    let containerId = '#banking-options';
    if (isMobile) containerId = '#banking-options-mobile';
    if (isTablet) containerId = '#banking-options-tablet';
    
    document.querySelectorAll(containerId + ' .bank-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    radio.closest('.bank-option').classList.add('selected');
}

function updateEwalletSelection(radio, isMobile, isTablet) {
    let containerId = '#ewallet-options';
    if (isMobile) containerId = '#ewallet-options-mobile';
    if (isTablet) containerId = '#ewallet-options-tablet';
    
    document.querySelectorAll(containerId + ' .bank-option').forEach(opt => {
        opt.classList.remove('selected');
    });
    radio.closest('.bank-option').classList.add('selected');
}

function selectPaymentMethod(method) {
    selectedPaymentMethod = method;
    
    document.querySelectorAll('.payment-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    const selectedOption = document.getElementById('payment-' + method).closest('.payment-option');
    selectedOption.classList.add('selected');
    document.getElementById('payment-' + method).checked = true;
    
    if (method !== 'banking') {
        const bankingOptions = document.getElementById('banking-options');
        if (bankingOptions) bankingOptions.style.display = 'none';
    }
    if (method !== 'ewallet') {
        const ewalletOptions = document.getElementById('ewallet-options');
        if (ewalletOptions) ewalletOptions.style.display = 'none';
    }
}

function toggleEwalletOptions(isMobile = false, isTablet = false) {
    selectedPaymentMethod = 'ewallet';
    
    let suffix = '';
    if (isMobile) suffix = '-mobile';
    if (isTablet) suffix = '-tablet';
    
    const ewalletRadioId = 'payment-ewallet' + suffix;
    const ewalletOptionsId = 'ewallet-options' + suffix;
    const bankingOptionsId = 'banking-options' + suffix;
    
    // Only update options within the same context (mobile, tablet, or desktop)
    let context = document.querySelector('.payment-content-container');
    if (isMobile) context = document.getElementById('mobile-payment-page');
    if (isTablet) context = document.getElementById('tablet-payment-page');
    
    if (context) {
        context.querySelectorAll('.payment-option').forEach(option => {
            option.classList.remove('selected');
        });
    }
    
    const ewalletRadio = document.getElementById(ewalletRadioId);
    if (ewalletRadio) {
        const ewalletOption = ewalletRadio.closest('.payment-option');
        if (ewalletOption) ewalletOption.classList.add('selected');
        ewalletRadio.checked = true;
    }
    
    const bankingOptions = document.getElementById(bankingOptionsId);
    if (bankingOptions) bankingOptions.style.display = 'none';
    
    const ewalletOptions = document.getElementById(ewalletOptionsId);
    if (ewalletOptions) {
        ewalletOptions.style.display = (ewalletOptions.style.display === 'none' || ewalletOptions.style.display === '') ? 'block' : 'none';
    }
}

function toggleBankingOptions(isMobile = false, isTablet = false) {
    selectedPaymentMethod = 'banking';
    
    let suffix = '';
    if (isMobile) suffix = '-mobile';
    if (isTablet) suffix = '-tablet';
    
    const bankingRadioId = 'payment-banking' + suffix;
    const bankingOptionsId = 'banking-options' + suffix;
    const ewalletOptionsId = 'ewallet-options' + suffix;
    
    // Only update options within the same context (mobile, tablet, or desktop)
    let context = document.querySelector('.payment-content-container');
    if (isMobile) context = document.getElementById('mobile-payment-page');
    if (isTablet) context = document.getElementById('tablet-payment-page');
    
    if (context) {
        context.querySelectorAll('.payment-option').forEach(option => {
            option.classList.remove('selected');
        });
    }
    
    const bankingRadio = document.getElementById(bankingRadioId);
    if (bankingRadio) {
        const bankingOption = bankingRadio.closest('.payment-option');
        if (bankingOption) bankingOption.classList.add('selected');
        bankingRadio.checked = true;
    }
    
    const ewalletOptions = document.getElementById(ewalletOptionsId);
    if (ewalletOptions) ewalletOptions.style.display = 'none';
    
    const bankingOptions = document.getElementById(bankingOptionsId);
    if (bankingOptions) {
        bankingOptions.style.display = (bankingOptions.style.display === 'none' || bankingOptions.style.display === '') ? 'block' : 'none';
    }
}

function proceedToConfirmation() {
    if (!selectedPaymentMethod) {
        alert('Please select a payment method to continue.');
        return;
    }
    
    if (selectedPaymentMethod === 'banking' && !selectedBankOption) {
        alert('Please select a bank to continue.');
        return;
    }
    
    if (selectedPaymentMethod === 'ewallet' && !selectedEwalletOption) {
        alert('Please select an e-wallet to continue.');
        return;
    }
    
    // Reset cart and information state after successful payment
    hasCompletedInformation = false;
    cart = [];
    updateCartDisplay();
    
    window.location.href = '/Scheduler/user_view/Confirmed';
}
</script>
