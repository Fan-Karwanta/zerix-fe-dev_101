@page
@model zerix_fe_dev.Pages.Scheduler.EventsModel
@{
    Layout = "_Scheduler";
    ViewData["Title"] = "Appointment History";
    ViewData["User"] = "Admin";
}

@await Html.PartialAsync("../user_view/_Navigation")

@await Html.PartialAsync("../user_view/_MobileSidebar")

<div class="container px-4 my-3 pt-md-3 pt-3">
    <!-- Page Title - Desktop Only -->
    <div class="text-center mb-4 d-none d-md-block">
        <h2 class="fs-32 ff-default font-darkgray fw-400 mb-0">Appointment Calendar</h2>
    </div>

    <!-- Mobile: Calendar Selection View -->
    <div id="mobile-calendar-view" class="d-md-none mobile-calendar-selection">
        <div class="d-flex align-items-center mb-3">
            <button class="btn btn-link p-0 text-decoration-none" onclick="window.history.back()">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 12H5M12 19L5 12L12 5" stroke="#ff5400" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            <h2 class="fs-24 ff-default font-darkgray fw-400 mb-0 ms-3">Appointment Calendar</h2>
        </div>

        <div class="mobile-mini-calendar">
            <div class="mini-calendar-header mb-3">
                <button class="btn btn-sm calendar-nav-btn" onclick="previousMonthMini()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
                <h6 id="mobile-calendar-month-year" class="mb-0 fs-18 fw-500">May 2023</h6>
                <button class="btn btn-sm calendar-nav-btn" onclick="nextMonthMini()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
            </div>
            <div class="mini-calendar-weekdays">
                <div class="mini-weekday">SUN</div>
                <div class="mini-weekday">MON</div>
                <div class="mini-weekday">TUE</div>
                <div class="mini-weekday">WED</div>
                <div class="mini-weekday">THUR</div>
                <div class="mini-weekday">FRI</div>
                <div class="mini-weekday">SAT</div>
            </div>
            <div id="mobile-calendar-days" class="mini-calendar-days"></div>
        </div>
    </div>

    <!-- Mobile: Daily Schedule View -->
    <div id="mobile-daily-view" class="d-md-none mobile-daily-schedule" style="display: none;">
        <div class="d-flex align-items-center mb-3">
            <button class="btn btn-link p-0 text-decoration-none" onclick="showMobileCalendar()">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 12H5M12 19L5 12L12 5" stroke="#ff5400" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            <h2 class="fs-24 ff-default font-darkgray fw-400 mb-0 ms-3">Appointment Calendar</h2>
        </div>

        <div class="mobile-date-navigation mb-3">
            <button class="btn btn-sm calendar-nav-btn" onclick="previousDayMobile()">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            <h6 id="mobile-selected-date" class="mb-0 fs-16 fw-500">July 17, 2025</h6>
            <button class="btn btn-sm calendar-nav-btn" onclick="nextDayMobile()">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>

        <div class="mobile-week-days mb-3">
            <div class="mobile-week-day" id="mobile-day-0">
                <div class="day-name">Sun</div>
                <div class="day-number">19</div>
            </div>
            <div class="mobile-week-day active" id="mobile-day-1">
                <div class="day-name">Mon</div>
                <div class="day-number">16</div>
            </div>
            <div class="mobile-week-day" id="mobile-day-2">
                <div class="day-name">Tue</div>
                <div class="day-number">17</div>
            </div>
            <div class="mobile-week-day" id="mobile-day-3">
                <div class="day-name">Wed</div>
                <div class="day-number">18</div>
            </div>
            <div class="mobile-week-day" id="mobile-day-4">
                <div class="day-name">Thu</div>
                <div class="day-number">19</div>
            </div>
        </div>

        <div class="search-box mb-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="M21 21L16.65 16.65"></path>
            </svg>
            <input type="text" class="form-control form-control-sm" placeholder="Search" />
        </div>

        <div class="mobile-time-slots" id="mobile-time-slots">
            <!-- Time slots will be generated by JavaScript -->
        </div>
    </div>

    <!-- Desktop View -->
    <div class="events-container d-none d-md-block">
        <div class="row g-4">
            <!-- Left Side: Mini Calendar -->
            <div class="col-12 col-lg-3">
                <div class="mini-calendar-container">
                    <div class="mini-calendar-header">
                        <button class="btn btn-sm calendar-nav-btn" onclick="previousMonthMini()">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                        <h6 id="mini-calendar-month-year" class="mb-0 fs-16 fw-500">May 2023</h6>
                        <button class="btn btn-sm calendar-nav-btn" onclick="nextMonthMini()">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </div>
                    <div class="mini-calendar-weekdays">
                        <div class="mini-weekday">SUN</div>
                        <div class="mini-weekday">MON</div>
                        <div class="mini-weekday">TUE</div>
                        <div class="mini-weekday">WED</div>
                        <div class="mini-weekday">THUR</div>
                        <div class="mini-weekday">FRI</div>
                        <div class="mini-weekday">SAT</div>
                    </div>
                    <div id="mini-calendar-days" class="mini-calendar-days"></div>
                </div>
            </div>

            <!-- Right Side: Full Calendar View -->
            <div class="col-12 col-lg-9">
                <div class="full-calendar-container">
                    <!-- Calendar Header -->
                    <div class="calendar-view-header">
                        <div class="d-flex align-items-center gap-3">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="viewDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="current-view-label">Monthly</span>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="viewDropdown">
                                    <li><a class="dropdown-item" href="#" onclick="switchView('monthly'); return false;">Monthly</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="switchView('daily'); return false;">Daily</a></li>
                                </ul>
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                <button class="btn btn-sm calendar-nav-btn" onclick="previousPeriod()">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                </button>
                                <h6 id="full-calendar-date" class="mb-0 fs-16 fw-500">July 15, 2025</h6>
                                <button class="btn btn-sm calendar-nav-btn" onclick="nextPeriod()">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    Sort
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                                    <li><a class="dropdown-item" href="#">Booked</a></li>
                                    <li><a class="dropdown-item" href="#">Completed</a></li>
                                    <li><a class="dropdown-item" href="#">Rescheduled</a></li>
                                    <li><a class="dropdown-item" href="#">Cancelled</a></li>
                                </ul>
                            </div>
                            <div class="search-box">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="11" cy="11" r="8"></circle>
                                    <path d="M21 21L16.65 16.65"></path>
                                </svg>
                                <input type="text" class="form-control form-control-sm" placeholder="Search" />
                            </div>
                        </div>
                    </div>

                    <!-- Calendar Week View (Monthly) -->
                    <div class="calendar-week-view" id="monthly-view">
                        <div class="week-header" id="week-header">
                            <div class="time-column">
                                <div class="gmt-label">GMT+07</div>
                            </div>
                            <!-- Days will be dynamically generated -->
                        </div>

                        <!-- Time Slots Grid -->
                        <div class="time-slots-grid" id="time-slots-grid">
                            <!-- Time slots will be dynamically generated -->
                        </div>
                    </div>

                    <!-- Calendar Daily View -->
                    <div class="calendar-daily-view" id="daily-view" style="display: none;">
                        <div class="daily-header" id="daily-header">
                            <div class="time-column-daily"></div>
                            <!-- Single day column will be dynamically generated -->
                        </div>

                        <!-- Daily Time Slots Grid -->
                        <div class="daily-time-slots-grid" id="daily-time-slots-grid">
                            <!-- Time slots will be dynamically generated -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Events Page Specific Styles */
.events-container {
    margin-top: 20px;
}

/* History Dropdown Button */
.btn-outline-orange {
    border: 2px solid #ff5400;
    color: #ff5400;
    background: white;
    border-radius: 8px;
    padding: 8px 16px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-outline-orange:hover {
    background: #ff5400;
    color: white;
}

.btn-outline-orange:hover svg {
    stroke: white;
}

/* Navigation Icons */
.nav-icon-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    border: 1.5px solid #ff5400;
    border-radius: 8px;
    background: white;
    transition: all 0.3s ease;
    text-decoration: none;
}

.nav-icon-btn:hover {
    background: #fff5f0;
    transform: translateY(-2px);
}

.gmt-label {
    font-size: 11px;
    color: #999;
    text-align: center;
    padding: 5px;
}

/* Mini Calendar */
.mini-calendar-container {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.mini-calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.mini-calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 8px;
    margin-bottom: 10px;
}

.mini-weekday {
    text-align: center;
    font-size: 11px;
    font-weight: 500;
    color: #999;
    padding: 5px 0;
}

.mini-calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 8px;
}

.mini-calendar-day {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 13px;
    color: #333;
    cursor: pointer;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.mini-calendar-day:hover {
    background: #f5f5f5;
}

/* Weekday highlighting (Sun-Thu) */
.mini-calendar-day.weekday-highlight {
    background-color: #feede4;
}

.mini-calendar-day.today {
    background: #ff5400;
    color: white;
    font-weight: 600;
}

.mini-calendar-day.other-month {
    color: #ccc;
}

.mini-calendar-day.selected {
    background: #ff5400 !important;
    color: white;
}

/* Full Calendar Container */
.full-calendar-container {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.calendar-view-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e0e0e0;
}

.search-box {
    position: relative;
    display: flex;
    align-items: center;
}

.search-box svg {
    position: absolute;
    left: 10px;
    pointer-events: none;
}

.search-box input {
    padding-left: 35px;
    border: 1px solid #ddd;
    border-radius: 6px;
    width: 200px;
}

/* Calendar Week View */
.calendar-week-view {
    overflow-x: auto;
}

.week-header {
    display: grid;
    grid-template-columns: 80px repeat(5, 1fr);
    gap: 1px;
    background: #e0e0e0;
    border: 1px solid #e0e0e0;
    margin-bottom: 1px;
}

.time-column {
    background: white;
    padding: 10px;
}

.day-column {
    background: white;
    padding: 15px;
    text-align: center;
}

.day-number {
    font-size: 20px;
    font-weight: 600;
    color: #333;
    margin-bottom: 5px;
}

.day-number.orange-circle {
    background: #ff5400;
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
}

.day-name {
    font-size: 12px;
    color: #666;
    text-transform: uppercase;
}

/* Time Slots Grid */
.time-slots-grid {
    display: grid;
    grid-template-rows: repeat(8, 80px);
    gap: 1px;
    background: #e0e0e0;
    border: 1px solid #e0e0e0;
}

.time-row {
    display: grid;
    grid-template-columns: 80px repeat(5, 1fr);
    gap: 1px;
    background: #e0e0e0;
}

.time-label {
    background: white;
    padding: 10px;
    font-size: 12px;
    color: #999;
    text-align: right;
    padding-right: 15px;
}

.time-cell {
    background: white;
    position: relative;
    min-height: 80px;
}

/* Appointment Events */
.appointment-event {
    position: absolute;
    top: 5px;
    left: 5px;
    right: 5px;
    padding: 8px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.appointment-event:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.event-green {
    background: #d4f4dd;
    border-left: 3px solid #4caf50;
}

.event-blue {
    background: #d4e4f7;
    border-left: 3px solid #2196f3;
}

.event-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 2px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.event-subtitle {
    color: #666;
    font-size: 11px;
    margin-bottom: 2px;
}

.event-time {
    color: #999;
    font-size: 10px;
}

/* Daily View Styles */
.calendar-daily-view {
    overflow-x: auto;
}

.daily-header {
    display: grid;
    grid-template-columns: 80px 1fr;
    gap: 1px;
    background: #e0e0e0;
    border: 1px solid #e0e0e0;
    margin-bottom: 1px;
}

.time-column-daily {
    background: white;
    padding: 10px;
}

.daily-day-column {
    background: white;
    padding: 15px;
    text-align: center;
}

.daily-day-number {
    font-size: 24px;
    font-weight: 600;
    color: white;
    background: #ff5400;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 5px;
}

.daily-day-name {
    font-size: 13px;
    color: #666;
    text-transform: capitalize;
    font-weight: 600;
}

.daily-time-slots-grid {
    display: grid;
    grid-template-rows: repeat(13, 100px);
    gap: 1px;
    background: #e0e0e0;
    border: 1px solid #e0e0e0;
    max-height: 600px;
    overflow-y: auto;
}

.daily-time-slots-grid::-webkit-scrollbar {
    width: 8px;
}

.daily-time-slots-grid::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.daily-time-slots-grid::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 4px;
}

.daily-time-slots-grid::-webkit-scrollbar-thumb:hover {
    background: #aaa;
}

.daily-time-row {
    display: grid;
    grid-template-columns: 80px 1fr;
    gap: 1px;
    background: #e0e0e0;
}

.daily-time-label {
    background: white;
    padding: 10px;
    font-size: 12px;
    color: #999;
    text-align: right;
    padding-right: 15px;
}

.daily-time-cell {
    background: white;
    position: relative;
    min-height: 100px;
    padding: 5px;
}

/* Daily view appointments - horizontal layout */
.daily-appointments-row {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    padding: 5px;
}

.daily-appointment-event {
    flex: 0 0 auto;
    min-width: 120px;
    max-width: 150px;
    padding: 8px 10px;
    border-radius: 6px;
    font-size: 11px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.daily-appointment-event:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.daily-appointment-event.event-red {
    background: #ffe5e5;
    border-left: 3px solid #f44336;
}

.daily-appointment-event.event-blue {
    background: #e3f2fd;
    border-left: 3px solid #2196f3;
}

.daily-appointment-event.event-green {
    background: #e8f5e9;
    border-left: 3px solid #4caf50;
}

.daily-appointment-event.event-purple {
    background: #f3e5f5;
    border-left: 3px solid #9c27b0;
}

.daily-event-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 3px;
    font-size: 12px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.daily-event-subtitle {
    color: #666;
    font-size: 10px;
    margin-bottom: 3px;
}

.daily-event-time {
    color: #999;
    font-size: 9px;
}

/* Mobile Calendar Selection View */
.mobile-calendar-selection {
    padding: 10px 0;
}

.mobile-mini-calendar {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 20px;
}

.mobile-mini-calendar .mini-calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Mobile Daily Schedule View */
.mobile-daily-schedule {
    padding: 10px 0;
}

.mobile-date-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
}

.mobile-week-days {
    display: flex;
    justify-content: space-between;
    gap: 8px;
    overflow-x: auto;
}

.mobile-week-day {
    flex: 0 0 auto;
    min-width: 60px;
    padding: 12px 8px;
    text-align: center;
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.mobile-week-day.active {
    background: #ff5400;
    color: white;
    border-color: #ff5400;
}

.mobile-week-day .day-name {
    font-size: 11px;
    font-weight: 500;
    margin-bottom: 5px;
    text-transform: uppercase;
}

.mobile-week-day .day-number {
    font-size: 18px;
    font-weight: 600;
}

.mobile-week-day.active .day-number {
    background: white;
    color: #ff5400;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
}

.mobile-time-slots {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    max-height: 500px;
    overflow-y: auto;
}

.mobile-time-row {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid #f0f0f0;
}

.mobile-time-row:last-child {
    border-bottom: none;
}

.mobile-time-label {
    flex: 0 0 80px;
    font-size: 13px;
    color: #999;
    font-weight: 500;
}

.mobile-time-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.mobile-appointment-card {
    padding: 10px 12px;
    border-radius: 6px;
    font-size: 12px;
    border-left: 3px solid;
}

.mobile-appointment-card.event-green {
    background: #e8f5e9;
    border-left-color: #4caf50;
}

.mobile-appointment-card.event-blue {
    background: #e3f2fd;
    border-left-color: #2196f3;
}

.mobile-appointment-card.event-red {
    background: #ffe5e5;
    border-left-color: #f44336;
}

.mobile-appointment-card .event-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 3px;
}

.mobile-appointment-card .event-time {
    font-size: 10px;
    color: #666;
}

/* Responsive Styles */
@@media (max-width: 991px) {
    .mini-calendar-container {
        margin-bottom: 20px;
    }
    
    .calendar-view-header {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start;
    }
    
    .week-header {
        grid-template-columns: 60px repeat(5, 1fr);
    }
    
    .time-row {
        grid-template-columns: 60px repeat(5, 1fr);
    }
    
    .time-label {
        font-size: 10px;
        padding-right: 8px;
    }
}

@@media (max-width: 768px) {
    .nav-icon-btn {
        display: none !important;
    }
    
    .week-header {
        grid-template-columns: 50px repeat(3, 1fr);
    }
    
    .time-row {
        grid-template-columns: 50px repeat(3, 1fr);
    }
    
    .day-column:nth-child(n+5) {
        display: none;
    }
    
    .time-cell:nth-child(n+5) {
        display: none;
    }
}
</style>

<script>
// Mini Calendar
let miniCurrentDate = new Date();
let fullCurrentDate = new Date();
let selectedWeekStart = null;
let currentView = 'monthly'; // 'monthly' or 'daily'

// Sample appointments data - expanded for daily view
const appointments = [
    {
        id: 1,
        title: 'Optimum Repair',
        subtitle: 'Repair Shop',
        date: new Date(2023, 4, 16), // May 16, 2023 (Tuesday)
        startTime: '08:00',
        endTime: '08:30',
        displayTime: '8:30 - 9:30',
        color: 'green'
    },
    {
        id: 2,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '09:00',
        endTime: '10:00',
        displayTime: '09:00 - 9:00 AM',
        color: 'blue'
    },
    // Additional appointments for daily view at 11 AM
    {
        id: 3,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '09:00 - 9:00 AM',
        color: 'red'
    },
    {
        id: 4,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '09:00 - 9:00 AM',
        color: 'blue'
    },
    {
        id: 5,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '09:00 - 9:00 AM',
        color: 'blue'
    },
    {
        id: 6,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '08:00 - 9:00 AM',
        color: 'blue'
    },
    {
        id: 7,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '08:00 - 9:00 AM',
        color: 'blue'
    },
    {
        id: 8,
        title: 'Amor Vet Cli...',
        subtitle: 'Consultation',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '11:00',
        endTime: '12:00',
        displayTime: '08:00 - 9:00 AM',
        color: 'purple'
    },
    // Optimum Repair at 12 PM
    {
        id: 9,
        title: 'Optimum Repair',
        subtitle: 'Repair Shop',
        date: new Date(2023, 4, 15), // May 15, 2023 (Sunday)
        startTime: '12:00',
        endTime: '13:00',
        displayTime: '12:00 - 08:30',
        color: 'green'
    }
];

function generateMiniCalendar() {
    const year = miniCurrentDate.getFullYear();
    const month = miniCurrentDate.getMonth();
    
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    document.getElementById('mini-calendar-month-year').textContent = `${monthNames[month]} ${year}`;
    
    const daysContainer = document.getElementById('mini-calendar-days');
    daysContainer.innerHTML = '';
    
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Previous month days
    for (let i = firstDay - 1; i >= 0; i--) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = daysInPrevMonth - i;
        daysContainer.appendChild(dayElement);
    }
    
    // Current month days
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day';
        
        const date = new Date(year, month, day);
        const dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday
        
        // Add beige background for weekdays (Sun-Thu: 0-4)
        if (dayOfWeek >= 0 && dayOfWeek <= 4) {
            dayElement.classList.add('weekday-highlight');
        }
        
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
        }
        
        // Check if this is the selected date
        if (fullCurrentDate && date.getDate() === fullCurrentDate.getDate() && 
            date.getMonth() === fullCurrentDate.getMonth() && 
            date.getFullYear() === fullCurrentDate.getFullYear()) {
            dayElement.classList.add('selected');
        }
        
        dayElement.textContent = day;
        dayElement.onclick = function() { selectMiniDate(date); };
        daysContainer.appendChild(dayElement);
    }
    
    // Next month days
    const totalCells = daysContainer.children.length;
    const remainingCells = 42 - totalCells;
    for (let day = 1; day <= remainingCells; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = day;
        daysContainer.appendChild(dayElement);
    }
}

function selectMiniDate(date) {
    fullCurrentDate = new Date(date);
    
    // Calculate the week start (Sunday)
    const dayOfWeek = date.getDay();
    selectedWeekStart = new Date(date);
    selectedWeekStart.setDate(date.getDate() - dayOfWeek);
    
    // Regenerate mini calendar to update selected state
    generateMiniCalendar();
    
    updateFullCalendar();
}

function previousMonthMini() {
    miniCurrentDate.setMonth(miniCurrentDate.getMonth() - 1);
    generateMiniCalendar();
}

function nextMonthMini() {
    miniCurrentDate.setMonth(miniCurrentDate.getMonth() + 1);
    generateMiniCalendar();
}

function previousPeriod() {
    if (currentView === 'daily') {
        fullCurrentDate.setDate(fullCurrentDate.getDate() - 1);
    } else {
        if (selectedWeekStart) {
            selectedWeekStart.setDate(selectedWeekStart.getDate() - 7);
            fullCurrentDate = new Date(selectedWeekStart);
        } else {
            fullCurrentDate.setDate(fullCurrentDate.getDate() - 7);
        }
    }
    updateFullCalendar();
}

function nextPeriod() {
    if (currentView === 'daily') {
        fullCurrentDate.setDate(fullCurrentDate.getDate() + 1);
    } else {
        if (selectedWeekStart) {
            selectedWeekStart.setDate(selectedWeekStart.getDate() + 7);
            fullCurrentDate = new Date(selectedWeekStart);
        } else {
            fullCurrentDate.setDate(fullCurrentDate.getDate() + 7);
        }
    }
    updateFullCalendar();
}

function switchView(view) {
    currentView = view;
    document.getElementById('current-view-label').textContent = view.charAt(0).toUpperCase() + view.slice(1);
    
    if (view === 'daily') {
        document.getElementById('monthly-view').style.display = 'none';
        document.getElementById('daily-view').style.display = 'block';
    } else {
        document.getElementById('monthly-view').style.display = 'block';
        document.getElementById('daily-view').style.display = 'none';
    }
    
    updateFullCalendar();
}

function updateFullCalendar() {
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    const dateStr = `${monthNames[fullCurrentDate.getMonth()]} ${fullCurrentDate.getDate()}, ${fullCurrentDate.getFullYear()}`;
    document.getElementById('full-calendar-date').textContent = dateStr;
    
    if (currentView === 'daily') {
        generateDailyView();
    } else {
        // Generate week header
        generateWeekHeader();
        
        // Generate time slots
        generateTimeSlots();
    }
}

function generateWeekHeader() {
    const weekHeader = document.getElementById('week-header');
    const timeColumn = weekHeader.querySelector('.time-column');
    
    // Clear existing day columns
    weekHeader.innerHTML = '';
    weekHeader.appendChild(timeColumn);
    
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu'];
    const weekStart = selectedWeekStart || getWeekStart(fullCurrentDate);
    
    for (let i = 0; i < 5; i++) {
        const currentDay = new Date(weekStart);
        currentDay.setDate(weekStart.getDate() + i);
        
        const dayColumn = document.createElement('div');
        dayColumn.className = 'day-column';
        
        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        
        // Check if this is today
        const today = new Date();
        if (currentDay.toDateString() === today.toDateString()) {
            dayNumber.classList.add('orange-circle');
        }
        
        dayNumber.textContent = currentDay.getDate();
        
        const dayName = document.createElement('div');
        dayName.className = 'day-name';
        dayName.textContent = dayNames[i];
        
        dayColumn.appendChild(dayNumber);
        dayColumn.appendChild(dayName);
        weekHeader.appendChild(dayColumn);
    }
}

function generateTimeSlots() {
    const timeSlotsGrid = document.getElementById('time-slots-grid');
    timeSlotsGrid.innerHTML = '';
    
    const hours = ['6 AM', '7 AM', '8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM'];
    const weekStart = selectedWeekStart || getWeekStart(fullCurrentDate);
    
    hours.forEach((hour, hourIndex) => {
        const timeRow = document.createElement('div');
        timeRow.className = 'time-row';
        
        const timeLabel = document.createElement('div');
        timeLabel.className = 'time-label';
        timeLabel.textContent = hour;
        timeRow.appendChild(timeLabel);
        
        // Create 5 day cells
        for (let dayIndex = 0; dayIndex < 5; dayIndex++) {
            const timeCell = document.createElement('div');
            timeCell.className = 'time-cell';
            
            // Check if there's an appointment for this time slot
            const currentDay = new Date(weekStart);
            currentDay.setDate(weekStart.getDate() + dayIndex);
            
            const appointment = findAppointment(currentDay, hourIndex + 6);
            
            if (appointment) {
                const eventDiv = document.createElement('div');
                eventDiv.className = `appointment-event event-${appointment.color}`;
                
                const eventTitle = document.createElement('div');
                eventTitle.className = 'event-title';
                eventTitle.textContent = appointment.title;
                
                const eventSubtitle = document.createElement('div');
                eventSubtitle.className = 'event-subtitle';
                eventSubtitle.textContent = appointment.subtitle;
                
                const eventTime = document.createElement('div');
                eventTime.className = 'event-time';
                eventTime.textContent = appointment.displayTime || `${appointment.startTime} - ${appointment.endTime}`;
                
                eventDiv.appendChild(eventTitle);
                eventDiv.appendChild(eventSubtitle);
                eventDiv.appendChild(eventTime);
                
                timeCell.appendChild(eventDiv);
            }
            
            timeRow.appendChild(timeCell);
        }
        
        timeSlotsGrid.appendChild(timeRow);
    });
}

function getWeekStart(date) {
    const weekStart = new Date(date);
    const dayOfWeek = date.getDay();
    weekStart.setDate(date.getDate() - dayOfWeek);
    return weekStart;
}

function findAppointment(date, hour) {
    return appointments.find(apt => {
        const aptDate = apt.date;
        const aptHour = parseInt(apt.startTime.split(':')[0]);
        
        return aptDate.getFullYear() === date.getFullYear() &&
               aptDate.getMonth() === date.getMonth() &&
               aptDate.getDate() === date.getDate() &&
               aptHour === hour;
    });
}

function findDailyAppointments(date, hour) {
    return appointments.filter(apt => {
        const aptDate = apt.date;
        const aptHour = parseInt(apt.startTime.split(':')[0]);
        
        return aptDate.getFullYear() === date.getFullYear() &&
               aptDate.getMonth() === date.getMonth() &&
               aptDate.getDate() === date.getDate() &&
               aptHour === hour;
    });
}

function generateDailyView() {
    const dailyHeader = document.getElementById('daily-header');
    const timeColumn = dailyHeader.querySelector('.time-column-daily');
    
    // Clear existing day column
    dailyHeader.innerHTML = '';
    dailyHeader.appendChild(timeColumn);
    
    // Create single day column
    const dayColumn = document.createElement('div');
    dayColumn.className = 'daily-day-column';
    
    const dayNumber = document.createElement('div');
    dayNumber.className = 'daily-day-number';
    dayNumber.textContent = fullCurrentDate.getDate();
    
    const dayName = document.createElement('div');
    dayName.className = 'daily-day-name';
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    dayName.textContent = dayNames[fullCurrentDate.getDay()];
    
    dayColumn.appendChild(dayNumber);
    dayColumn.appendChild(dayName);
    dailyHeader.appendChild(dayColumn);
    
    // Generate time slots for daily view
    const timeSlotsGrid = document.getElementById('daily-time-slots-grid');
    timeSlotsGrid.innerHTML = '';
    
    const hours = ['6 AM', '7 AM', '8 AM', '9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM'];
    
    hours.forEach((hour, hourIndex) => {
        const timeRow = document.createElement('div');
        timeRow.className = 'daily-time-row';
        
        const timeLabel = document.createElement('div');
        timeLabel.className = 'daily-time-label';
        timeLabel.textContent = hour;
        timeRow.appendChild(timeLabel);
        
        const timeCell = document.createElement('div');
        timeCell.className = 'daily-time-cell';
        
        // Check if there are appointments for this time slot
        const dayAppointments = findDailyAppointments(fullCurrentDate, hourIndex + 6);
        
        if (dayAppointments.length > 0) {
            const appointmentsRow = document.createElement('div');
            appointmentsRow.className = 'daily-appointments-row';
            
            dayAppointments.forEach(appointment => {
                const eventDiv = document.createElement('div');
                eventDiv.className = `daily-appointment-event event-${appointment.color}`;
                
                const eventTitle = document.createElement('div');
                eventTitle.className = 'daily-event-title';
                eventTitle.textContent = appointment.title;
                
                const eventSubtitle = document.createElement('div');
                eventSubtitle.className = 'daily-event-subtitle';
                eventSubtitle.textContent = appointment.subtitle;
                
                const eventTime = document.createElement('div');
                eventTime.className = 'daily-event-time';
                eventTime.textContent = appointment.displayTime;
                
                eventDiv.appendChild(eventTitle);
                eventDiv.appendChild(eventSubtitle);
                eventDiv.appendChild(eventTime);
                
                appointmentsRow.appendChild(eventDiv);
            });
            
            timeCell.appendChild(appointmentsRow);
        }
        
        timeRow.appendChild(timeCell);
        timeSlotsGrid.appendChild(timeRow);
    });
}

// Mobile-specific functions
function generateMobileCalendar() {
    const year = miniCurrentDate.getFullYear();
    const month = miniCurrentDate.getMonth();
    
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    document.getElementById('mobile-calendar-month-year').textContent = `${monthNames[month]} ${year}`;
    
    const daysContainer = document.getElementById('mobile-calendar-days');
    daysContainer.innerHTML = '';
    
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Previous month days
    for (let i = firstDay - 1; i >= 0; i--) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = daysInPrevMonth - i;
        daysContainer.appendChild(dayElement);
    }
    
    // Current month days
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day';
        
        const date = new Date(year, month, day);
        const dayOfWeek = date.getDay();
        
        if (dayOfWeek >= 0 && dayOfWeek <= 4) {
            dayElement.classList.add('weekday-highlight');
        }
        
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
        }
        
        dayElement.textContent = day;
        dayElement.onclick = function() { selectMobileDateAndShowSchedule(date); };
        daysContainer.appendChild(dayElement);
    }
    
    // Next month days
    const totalCells = daysContainer.children.length;
    const remainingCells = 42 - totalCells;
    for (let day = 1; day <= remainingCells; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'mini-calendar-day other-month';
        dayElement.textContent = day;
        daysContainer.appendChild(dayElement);
    }
}

function selectMobileDateAndShowSchedule(date) {
    fullCurrentDate = new Date(date);
    
    // Show mobile daily view
    document.getElementById('mobile-calendar-view').style.display = 'none';
    document.getElementById('mobile-daily-view').style.display = 'block';
    
    // Update mobile schedule
    updateMobileDailyView();
}

function showMobileCalendar() {
    document.getElementById('mobile-daily-view').style.display = 'none';
    document.getElementById('mobile-calendar-view').style.display = 'block';
}

function previousDayMobile() {
    fullCurrentDate.setDate(fullCurrentDate.getDate() - 1);
    updateMobileDailyView();
}

function nextDayMobile() {
    fullCurrentDate.setDate(fullCurrentDate.getDate() + 1);
    updateMobileDailyView();
}

function updateMobileDailyView() {
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];
    const dateStr = `${monthNames[fullCurrentDate.getMonth()]} ${fullCurrentDate.getDate()}, ${fullCurrentDate.getFullYear()}`;
    document.getElementById('mobile-selected-date').textContent = dateStr;
    
    // Update week days
    generateMobileWeekDays();
    
    // Generate time slots
    generateMobileTimeSlots();
}

function generateMobileWeekDays() {
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu'];
    const weekStart = getWeekStart(fullCurrentDate);
    
    for (let i = 0; i < 5; i++) {
        const currentDay = new Date(weekStart);
        currentDay.setDate(weekStart.getDate() + i);
        
        const dayElement = document.getElementById(`mobile-day-${i}`);
        if (dayElement) {
            const dayNameEl = dayElement.querySelector('.day-name');
            const dayNumberEl = dayElement.querySelector('.day-number');
            
            dayNameEl.textContent = dayNames[i];
            dayNumberEl.textContent = currentDay.getDate();
            
            // Check if this is the selected date
            if (currentDay.toDateString() === fullCurrentDate.toDateString()) {
                dayElement.classList.add('active');
            } else {
                dayElement.classList.remove('active');
            }
            
            dayElement.onclick = function() {
                fullCurrentDate = new Date(currentDay);
                updateMobileDailyView();
            };
        }
    }
}

function generateMobileTimeSlots() {
    const timeSlotsContainer = document.getElementById('mobile-time-slots');
    timeSlotsContainer.innerHTML = '';
    
    const hours = ['09:00 AM', '09:30 AM', '10:00 AM', '10:30 AM', '11:00 AM', '11:30 AM', '12:00 PM', '12:30 PM', '13:00 PM', '13:30 PM', '15:00 PM', '15:30 PM', '14:00 PM'];
    
    hours.forEach((hour, hourIndex) => {
        const timeRow = document.createElement('div');
        timeRow.className = 'mobile-time-row';
        
        const timeLabel = document.createElement('div');
        timeLabel.className = 'mobile-time-label';
        timeLabel.textContent = hour;
        timeRow.appendChild(timeLabel);
        
        const timeContent = document.createElement('div');
        timeContent.className = 'mobile-time-content';
        
        // Check for appointments at this time
        const hourNum = parseInt(hour.split(':')[0]);
        const dayAppointments = findDailyAppointments(fullCurrentDate, hourNum);
        
        if (dayAppointments.length > 0) {
            dayAppointments.forEach(apt => {
                const card = document.createElement('div');
                card.className = `mobile-appointment-card event-${apt.color}`;
                
                const title = document.createElement('div');
                title.className = 'event-title';
                title.textContent = apt.title;
                
                const time = document.createElement('div');
                time.className = 'event-time';
                time.textContent = apt.displayTime;
                
                card.appendChild(title);
                card.appendChild(time);
                timeContent.appendChild(card);
            });
        }
        
        timeRow.appendChild(timeContent);
        timeSlotsContainer.appendChild(timeRow);
    });
}

// Initialize calendars on page load
document.addEventListener('DOMContentLoaded', function() {
    // Set initial date to May 1, 2023 to match the reference
    miniCurrentDate = new Date(2023, 4, 1); // May 2023
    fullCurrentDate = new Date(2023, 4, 15); // May 15, 2023
    selectedWeekStart = new Date(2023, 4, 14); // Week starting May 14, 2023
    
    // Generate desktop calendars
    generateMiniCalendar();
    updateFullCalendar();
    
    // Generate mobile calendar
    if (window.innerWidth < 768) {
        generateMobileCalendar();
    }
});
</script>
